# File /Users/slarti/Documents/TEC1D/software-repo/monitors/JMon/JmonSource/JMON_SOURCE_01.asm
0000			;  
0000			;JMON - JIM'S MONITOR  
0000			;BY JIM ROBERTSON  
0000			;  
0000			;  
0000			;FILENAME : JMON_SRC_01.ASM  
0000			;VERSION : 1  
0000			;  
0000			;This version has been cleaned up by Mark Jelic, June 2021  
0000			;[Lovingly] RESTORED TO SOURCE FROM PDF LISTING(S) FEBRUARY 2021  
0000			;[by Craig Jones. What a champion effort! - MJ]  
0000			;  
0000			;THE PHOTOCOPIED PDF LISTING WAS CONVERTED TO A TEXT FILE VIA OCR  
0000			;THE MISSING PAGE 9 WAS TAKEN FROM ANOTHER VERSION OF THE LISTING  
0000			;PAGE NUMBERS REFER TO THE PHOTOCOPIED LISTING PDF FILE  
0000			;  
0000			;  
0000			;<PAGE 23> KEYBOARD READER/VALIDATER CONDITIONAL ASSEMBLY  
0000			;JMON USES BIT 6 OF THE LATCH ON THE DAT BOARD TO READ THE INVERTED DA  
0000			;FROM THE KEYBOARD ENCODER  
0000			;THE CONDITIONAL ASSEMBLY ALLOWS FOR THE ACTIVE HIGH DA SIGNAL TO  
0000			;BE CONNECTED DIRECTLY TO D6 (VIA A TRI-STATE BUFFER) AT THE KEYBOARD I/O ADDRESS  
0000			;  
0000			;KEYBOARD ENCODER DA (DATA AVAILABLE) IS ACTIVE HIGH  
0000			;#DEFINE DA_ACTIVE_HIGH  
0000			;KEYBOARD ENCODER DA CONNECTED TO KEYBOARD INPUT PORT DATA BIT 6  
0000			;#DEFINE DA_KEYBOARD  
0000			;  
0000			;GLOSSARY  
0000			;  
0000			;CURRENT EDITING LOCATION (082E)  
0000			;THIS IS THE ADDRESS THAT IS USUALLY DISPLAYED IN THE ADDRESS SECTION ON THE TEC LED  
0000			;DISPLAY. IT IS THE ADDRESS THAT IS SUBJECT TO MODIFICATION BY JMON.  
0000			;  
0000			;MONITOR CONTROL BYTE (MCB) (082B)  
0000			;THIS BYTE CONTAINS THE INFORMATION OF THE CURRENT WORKING STATE OF JMON. THE INFORMATION  
0000			;HELD IN THIS BYTE IS:  
0000			;1 - THE CURRENT MODE OF JMON.  
0000			;E.G. DATA, ADDRESS OR FUNCTION (NOT SHIFT AS SHIFT IS TESTED AND HANDLED DURING THE DATA  
0000			;KEY HANDLER ROUTINE). BITS 4 AND 5 ENCODE THE CURRENT MODE IN THE FOLLOWING WAY. BOTH  
0000			;BITS ARE LOW FOR THE DATA MODE, BIT 4 IS HIGH FOR THE ADDRESS MODE, BITS 4 AND 5 ARE HIGH  
0000			;FOR THE FUNCTION MODE. BIT 4 IS CALLED THE ADDRESS/FUNCTION BIT As THE SOFTWARE ONLY  
0000			;NEEDS TO TEST THIS BIT TO FIND IF EITHER THE ADDRESS OR FUNCTION MODE IS ACTIVE. BIT 5  
0000			;IS THE FUNCTION MODE ENABLED BIT.  
0000			;2 - THE NUMBER OF THE CURRENT FUNCTION I.E. 1,2 OR 3.  
0000			;THIS IS ENCODED IN BITS 2 AND 3. IF NO FUNCTION OR FUNCTION-1 IS ENABLED THEN BOTH BITS  
0000			;ARE LOW. IF FUNCTION-2 IS SELECTED THEN BIT 2 IS HIGH AND BIT 3 IS LOW. IF FUNCTION-3 IS  
0000			;SELECTED THEN BIT 3 IS HIGH AND BIT 2 IS LOW.  
0000			;3 - THE NUMBER OF NIBBLES ENTERED  
0000			;THIS IS ENCODED IN BITS 0 AND 1. IF NO NIBBLES HAVE BEEN ENTERED IN THE CURRENT EDITING  
0000			;LOCATION THEN BOTH BIT ARE LOW. IF ONE NIBBLE HAS BEEN ENTERED THEN BIT 0 IS HIGH AND  
0000			;BIT 1 IS LOW IS TWO NIBBLES HAVE BEEN ENTERED THEN BIT 0 IS LOW AND BIT 1 IS HIGH. JMON  
0000			;USES THESE BITS WHEN DECIDING ON THE AUTO-INCREMENT FEATURE. BITS 6 AND 7 ARE NOT USED.  
0000			;  
0000			;DISPLAY BUFFER ADDRESS - (082C/D)  
0000			;THE CONTENTS OF 082C/D POINTS TO THE LOCATION IN MEMORY OF THE 6 BYTE DISPLAY BUFFER  
0000			;(0800 FOR JMON AND 0806 FOR THE STEPPER). THE DISPLAY BUFFER ADDRESS POINTS TO THE LOWEST  
0000			;ADDRESS OF THE DISPLAY BUFFER WHICH CONTAINS THE LOW ORDER DATA DISPLAY BYTE.  
0000			;  
0000			;KEY PLANT  
0000			;THE KEY PLANT IS A FAKE KEY STROKE THAT MAY BE GENERATED BY THE "DURING SCAN/REY LOOP"  
0000			;USER PATCH. THE PLANT ALLOWS JMON'S MONITOR FUNCTIONS TO BE SOFTWARE CONTROLLED E.G. YOU  
0000			;MAY WISH TO VIEW THE CONTENTS ,OF MEMORY BYTE BY BYTE. WITH THE KEY PLANT YOU CAN SET JMON  
0000			;UP TO AUTOMATICALLY INCREMENT THE CURRENT EDIT LOCATION EVERY FEW SECONDS.  
0000			;THE PLANT IS IDENTIFIED BY THE USER PATCH STORING THE REQUIRED KEY VALUE IN, AND SETTING  
0000			;BIT 7 OF THE INPUT KEY BUFFER (0820).  
0000			;  
0000			;AUTO KEY STATUS BYTE (082A)  
0000			;THIS BYTE HOLDS THE INFORMATION REQUIRED FOR THE AUTO KEY REPEAT SECTION. THE INFORMATION  
0000			;HELD IN THIS BYTE IS EITHER ONE OF THE FOLLOWING:  
0000			;A "NEXT KEY DETECTION WILL BE A FIRST DETECTION" SO JMON WILL PROCESS THE KEY IMMEDIATELY  
0000			;(BIT 7 HIGH) . A TIMER (BITS 0-6) THAT COUNTS, A DELAY FOR THE AUTO. REPEAT TIMING.  
0000			;  
0000			;KEY PRESS FLAG (0825)  
0000			;THIS FLAG IS USED TO REMEMBER IF THE ONE KEY PRESS HAS ALREADY BEEN DETECTED AND PROCESSED.  
0000			;THIS PREVENTS THE SAME KEY BEING PROCESSED EACH TIME THE SOFTWARE FINDS THAT IT IS PUSHED.  
0000			;THIS IS THE WAY IT WORKS:  
0000			;THE KEY PRESS FLAG 1S ZEROED BY THE JMON DEFAULT VARIABLES AND THIS FLAGS A "NO KEY  
0000			;PRESSED" STATE. WHEN A KEY IS DETECTED THEN THIS FLAG IS TESTED AND IF ZERO THEN THE KEY  
0000			;IS ACCEPTED AS A FIRST KEY PRESS. IN THIS CASE THE KEY PRESS FLAG IS THEN SET TO FF TO  
0000			;REMEMBER THAT THE KEY PRESS HAS BEEN DETECTED. IF A KEY IS DETECTED AND THIS FLAG BYTE  
0000			;IS NOT ZERO, THEN THE KEY IS IGNORED. WHEN THE SOFTWARE FINDS THAT NO KEY IS BEING PRESSED,  
0000			;THEN THIS FLAG IS CLEARED TO ALLOW THE NEXT KEY PRESS DETECTED TO BE PROCESSED.  
0000			;THIS FLAG IS USED BY THE RST 08, RST 10 RST 18 AND RST 20 KEYBOARD ROUTINES AS DESCRIBED  
0000			;IN ISSUE 15 TALKING ELECTRONICS AND ALSO THE STEPPER SOFTWARE.  
0000			;THE AUTO KEY REPEAT ROUTINE DOES NOT USE THIS FLAG BYTE, DO NOT CONFUSE THIS FLAG WITH  
0000			;THE AUTO KEY STATUS BYTE WHICH IS USED BY THE AUTO KEY REPEAT SECTION.  
0000			  
0000			;TAPE FILE INFORMATION BLOCK  
0000			;THIS IS A 12 BYTE BLOCK THAT CONTAINS THE FOLLOWING INFORMATION:  
0000			;THE START ADDRESS OF THE BLOCK, THE NUMBER OF BYTES IN THE BLOCK, THE FILE NUMBER AND AN  
0000			;OPTIONAL GO ADDRESS OR FFFF IF OPTIONAL GO IS DISABLED. THE OTHER 4 BYTES ARE NOT USED  
0000			;AT THIS STAGE.  
0000			;THIS BLOCK IS OUTPUTTED AND INPUTTED TO AND FROM THE TAPE ON EACH TAPE OPERATION.  
0000			;  
0000			;"NEXT PC" BUFFER  
0000			;THIS IS A TEMPORARY PLACE TO SAVE THE RETURN ADDRESS WHICH IS THEN USED AS THE ACTUAL PC  
0000			;VALUE FOR THE NEXT INSTRUCTION STEPPED.  
0000			;  
0000			;FORCED HARD RESET  
0000			;THIS IS ACHIEVED BY HOLDING DOWN A KEY WHEN RELEASING THE RESET. THE HARD RESET CAUSES  
0000			;JMON TO RE-BOOT ITS VARIABLES AND ALSO MASK OFF ALL THE USER PATCHES (EXCEPT THE RESET  
0000			;PATCH). THE MAIN PURPOSE OF A FORCED HARD RESET IS TO RECOVER THE TEC IF A USER PATCH  
0000			;ENTERS A CONTINUOUS LOOP.  
0000			;  
0000			  
0000			L0792:      EQU     0792h                               ;BASE OF REGISTER NAME TABLE  
0000			L0800:      EQU     0800h                               ;Current displayed Address Buffer  
0000			L0804:      EQU     0804H                               ;Current displayed Data Buffer  
0000			L0805:      EQU     0805H                               ;Character #2 of the Data Display Buffer  
0000			L0806:      EQU     0806h                               ;Stepper's 6 Byte Display Buffer  
0000			L0820:      EQU     0820H                               ;KEY BUFFER  
0000			L0821:      EQU     0821H                               ;LCD ON/OFF FLAG  
0000			L0822:      EQU     0822H                               ;SOUND ON/OFF  
0000			L0823:      EQU     0823H                               ;GO AT ALTERNATE GO ADDRESS IF AA  
0000			L0824:      EQU     0824H                               ;STEPPER KEY CONTROL/TIMER  
0000			L0825:      EQU     0825H                               ;KEY PRESS FLAG  
0000			L0826:      EQU     0826H                               ;UNUSED  
0000			L0827:      EQU     0827H                               ;AUTO INCREMENT ON/OFF  
0000			L0828:      EQU     0828H                               ;ALT GO ADDR/SOFT RESET EDIT LOCATION  
0000			L082A:      EQU     082AH                               ;AUTO KEY STATUS BYTE  
0000			L082B:      EQU     082BH                               ;MONITOR CONTROL BYTE (MCB)  
0000			L082C:      EQU     082CH                               ;DISPLAY BUFFER ADDRESS (using 7seg Display codes)  
0000			L082E:      EQU     082EH                               ;CURRENT EDITING LOCATION (CEL)  
0000			  
0000			;The following are the JUMP addresses that a CALLED by JMON,  
0000			;after they are copied from the ROM (starting @ 071Fh) to the RAM @ 0830h, on a Hard Reset.  
0000			;They point back to routines in the ROM, so not sure why this was done.  
0000			L0830:      EQU     0830H                               ;CONVERT HL TO DISPLAY CODE @ 01D5h  
0000			L0833:      EQU     0833H                               ;CONVERT A TO DISPLAY CODE @ 01DAh  
0000			L0836:      EQU     0836H                               ;LED SCAN ROUTINE @ 01BAh  
0000			L0839:      EQU     0839H                               ;SET LED DOTS @ 01EEh  
0000			L083C:      EQU     083CH                               ;RESET TONES @ 0224h  
0000			L083F:      EQU     083FH                               ;TONE @ 0227h  
0000			L0842:      EQU     0842H                               ;SCAN/KEY/LCD/PATCH LOOP @ 0181h  
0000			L0845:      EQU     0845h                               ;SOFT JMON ENTRY L0845 @ 00B2h  
0000			L0848:      EQU     0848H                               ;LCD ROUTINE @ 023Ch  
0000			  
0000			L084B:      EQU     084BH                               ;PRE-SCAN USER PATCH  
0000			L084E:      EQU     084EH                               ;USER "DURING LOOP" PATCH  
0000			L0851:      EQU     0851H                               ;USER "AFTER KEY" PATCH  
0000			L0858:      EQU     0858H                               ;ADDRESS OF INSTRUCTION JUST STEPPED  
0000			L085A:      EQU     085AH                               ;CURRENT REG No. BUFFER  
0000			L0860:      EQU     0860H                               ;RE-ENTRY ADDRESS BUFFER  
0000			L0868:      EQU     0868H                               ;"NEXT PC" BUFFER  
0000			L086A:      EQU     086Ah                               ;SHIFT 7 ROUTINE START (REG DISPLAY)  
0000			L086E:      EQU     086EH                               ;  
0000			L0870:      EQU     0870H                               ;  
0000			L087E:      EQU     087EH                               ;Stack Pointer Save Buffer  
0000			L0882:      EQU     0882H                               ;  
0000			L0884:      EQU     0884H                               ;  
0000			L0886:      EQU     0886H                               ;  
0000			L0887:      EQU     0887H                               ;  
0000			L0888:      EQU     0888H                               ;  
0000			L088A:      EQU     088AH                               ;  
0000			L088C:      EQU     088CH                               ;Active Window +1  
0000			L088F:      EQU     088FH                               ;  
0000			L0891:      EQU     0891H                               ;  
0000			L0893:      EQU     0893H                               ;  
0000			L0895:      EQU     0895H                               ;  
0000			L0897:      EQU     0897H                               ;  
0000			L0898:      EQU     0898H                               ;  
0000			L089A:      EQU     089AH                               ;  
0000			L089C:      EQU     089CH                               ;  
0000			L089E:      EQU     089EH                               ;  
0000			L08A4:      EQU     08A4H                               ;  
0000			L08A6:      EQU     08A6H                               ;  
0000			L08A8:      EQU     08A8H                               ;  
0000			L08AA:      EQU     08AAH                               ;  
0000			L08B0:      equ     08B0H                               ;  
0000			L08B1:      EQU     08B1H                               ;  
0000			L08B3:      EQU     08B3H                               ;  
0000			L08B5:      EQU     08B5h                               ;Checksum?  
0000			L08B6:      EQU     08B6H                               ;  
0000			L08C0:      EQU     08BEh                               ;User Table -2  
0000			L08FF:      EQU     08FFH                               ;Reset Flag  
0000			L3800:      EQU     3800H                               ;LCD ROUTINES  
0000			L381E:      EQU     381Eh                               ;Start of the Jump Table in the JMON Utilities  
0000			  
0000			;IO Port ASSIGNMENTS  
0000			KEYBOARD:   EQU     0x00                                ;KEYBOARD ENCODER  
0000			DSCAN:      EQU     0x01                                ;DISPLAY CATHODE DRIVER LATCH  
0000			DSEGMENT:   EQU     0x02                                ;DISPLAY SEGMENT DRIVER LATCH  
0000			  
0000			;DAT BOARD  
0000			DATLATCH:   EQU     0x03                                ;DAT BOARD LATCH  
0000			LCDDATA:    EQU     0x84                                ;LCD DATA REGISTER  
0000			LCDINST:    EQU     0x04                                ;LCD INSTRUCTION REGISTER  
0000			  
0000			  
0000			;AT THE START OF JMON, HL IS SAVED IN ITS SINGLE STEPPER BUFFER ADD THE SOFT RESET DISPLAY  
0000			;VALUE IS PLACED IN THE CURRENT EDIT LOCATION BUFFER. THE ROUTINE THEN IS CONTINUED AT $0068.  
0000			ORG     $0000  
0000 22 6e 08		            LD      (L086E), HL                         ;SAVE HL PART OF REGISTER SAVE  
0003 2a 28 08		            LD      HL, (L0828)                         ;GET SOFT RESET INITIAL EDIT  
0006 18 63		            JR      L006B                               ;LOCATION AND CONTINUE AT 006B  
0008			  
0008			;RST 08 AND RST 10 (CF AND D7)  
0008			;THESE TWO COMBINE TOGETHER TO SIMULATE A HALT INSTRUCTION. THIS IS DONE BY LOOPING UNTIL  
0008			;THE CURRENT (IF ANY) KEY PRESS IS RELEASED (RST 08), AND THEN LOOPING UNTIL A NEW KEY  
0008			;PRESS IS DETECTED (RST 10).  
0008			  
0008 e7			L0008:      RST     20H                                 ;TEST FOR KEY PRESS  
0009 28 fd		            JR      Z, L0008                            ;LOOP IF KEY PRESSED  
000b 00			            NOP                                         ;ELSE  
000c 00			            NOP                                         ;MOVE  
000d 00			            NOP                                         ;TO  
000e 00			            NOP                                         ;NEXT  
000f 00			            NOP                                         ;RST  
0010 e7			L0010:      RST     20H                                 ;TEST FOR KEY AGAIN  
0011 20 fd		            JR      NZ, L0010                           ;LOOP IF KEY NOT PRESSED  
0013 e6 1f		            AND     0x1F                                ;MASK OFF JUNK BITS  
0015 ed 47		            LD      I, A                                ;STORE IN INTERRUPT REGISTER  
0017 c9			            RET                                         ;DONE  
0018			  
0018			;RST 18 (DF)AND RST (20)  
0018			;RST 18 CALLS THE LED SCAN ROUTINE ONCE THEN MOVES ON INTO RST 20 THAT THEN CALLS A KEYBOARD  
0018			;READ ROUTINE.  
0018			;THE KEYBOARD MUST BE READ CONTINUOUSLY OVER A PERIOD OF TIME, AS THE DATA AVAILABLE SIGNAL  
0018			;(BIT 6, PORT 3) (USUALLY) PULSES, WHEN A KEY IS PRESSED, IN TIME WITH THE KEY ENCODER  
0018			;CHIP'S SCANNING. IF THE KEY BOARD IS READ ONLY ONCE EVERY SECOND, THEN THE SOFTWARE MAY  
0018			;AND PROBABLY) WILL TARE SEVERAL SECONDS TO DETECT THE KEY.  
0018			;THE NUMBER OF READ CYCLES FOR THE KEYBOARD IS LOADED INTO B.  
0018			  
0018 e5			            PUSH    HL                                  ;SAVE HL  
0019 d5			            PUSH    DE                                  ;AND DE  
001a cd 36 08		            CALL    L0836                               ;CALL SCAN ROUTINE  
001d d1			            POP     DE                                  ;RECOVER DE  
001e e1			            POP     HL                                  ;AND HL  
001f 00			            NOP                                         ;NEXT RST  
0020 c5			            PUSH    BC                                  ;SAVE BC  
0021 06 20		            LD      B, 0x20                             ;B = NUMBER OF KEYBOARD SCAN LOOPS  
0023 cd ad 06		            CALL    L06AD                               ;CALL KEY READER/VALIDATER  
0026 c1			            POP     BC                                  ;RECOVER BC  
0027 c9			            RET                                         ;DONE  
0028			  
0028			;RST 28 (EF)  
0028			;START STEPPING FROM THE INSTRUCTION FOLLOWING THE RST 28  
0028 e3			            EX      (SP), HL                            ;GET RETURN ADDRESS FROM THE STACK  
0029 22 58 08		            LD      (L0858), HL                         ;PUT IN "NEXT PC" BUFFER  
002c e3			            EX      (SP), HL                            ;FIX UP STACK  
002d fb			            EI                                          ;ENABLE INTERRUPTS  
002e c9			            RET                                         ;STEPPING WILL OCCUR AFTER RETURN  
002f ff			            RST     38H                                 ;SPARE  
0030			  
0030			;RST 30 (F7)  
0030			;TEST THE BUSY STATE OF THE LCD AND LOOP WHILE BUSY  
0030 db 04		L0030:      IN      A, (LCDINST)                        ;READ STATUS BIT FROM LCD  
0032 07			            RLCA                                        ;PUT IN CARRY  
0033 38 fb		            JR      C, L0030                            ;LOOP IF LCD BUSY  
0035 c9			            RET                                         ;DONE  
0036 ff			            RST     38H  
0037 ff			            RST     38H  
0038			  
0038			;RST 38 (FF)  
0038			;INTERRUPT HANDLER FOR STEPPER AND BREAK-POINTS  
0038 c3 12 03		            JP      L0312                               ;JUMP TO STEPPER ROUTINE  
003b ff			            RST     38H                                 ;"FF"  
003c ff			            RST     38H                                 ;"FF"  
003d ff			            RST     38H                                 ;"FF"  
003e ff			            RST     38H                                 ;"FF"  
003f ff			            RST     38H                                 ;"FF"  
0040 ff			            RST     38H                                 ;"FF"  
0041			  
0041			;JUMP TABLE FOR EXTERNAL SOFTWARE TO USE JMON ROUTINES  
0041 c3 dd 03		L0041:      JP      L03DD                               ;MENU GATE  
0044 c3 79 04		L0044:      JP      L0479                               ;PERIMETER HANDLER ENTRY  
0047 c3 ed 03		L0047:      JP      L03ED                               ;SOFT MENU ENTRY  
004a c3 9f 06		L004A:      JP      L069F                               ;ERR-IN ENTRY  
004d c3 b3 05		L004D:      JP      L05B3                               ;PASS/FAIL/MENU  
0050 c3 a3 04		L0050:      JP      L04A3                               ;SOFT PERIMETER HANDLER ENTRY  
0053 ff			            RST     38H                                 ;"FF"  
0054 ff			            RST     38H                                 ;"FF"  
0055 ff			            RST     38H                                 ;"FF"  
0056 ff			            RST     38H                                 ;"FF"  
0057 ff			            RST     38H                                 ;"FF"  
0058 ff			            RST     38H                                 ;"FF"  
0059 ff			            RST     38H                                 ;"FF"  
005a ff			            RST     38H                                 ;"FF"  
005b ff			            RST     38H                                 ;"FF"  
005c ff			            RST     38H                                 ;"FF"  
005d ff			            RST     38H                                 ;"FF"  
005e			  
005e			;SHIFT-2 ROUTINE  
005e			;THIS STORES THE CURRENT EDIT LOCATION IN THE "NEXT PC" BUFFER. THE INTERRUPTS ARE THEN  
005e			;ENABLED AND THE PROGRAM JUMPS TO THE USER ROUTINE TO BE STEPPED. STEPPING OCCURS AT THE  
005e			;CURRENT EDIT LOCATION (CEL).  
005e 2a 2e 08		            LD      HL, (L082E)                         ;PUT CURRENT EDIT LOCATION IN  
0061 22 58 08		            LD      (L0858), HL                         ;"NEXT PC" BUFFER  
0064 fb			            EI                                          ;ENABLE INTERRUPTS  
0065 e9			            JP      (HL)                                ;START STEPPING  
0066			  
0066			;NMI HANDLER (IMMEDIATE RETURN)  
0066 ed 45		            RETN                                        ;IGNORE NMI  
0068 ff			            RST     38H                                 ;RESERVED  
0069 ff			            RST     38H                                 ;FOR A "Post Burn"  
006a ff			            RST     38H                                 ;JUMP LOCATION  
006b			  
006b			;CONTINUATION OF MONITOR  
006b ed 56		L006B:      IM      1                                   ;SET INTERRUPT MODE 1 FOR STEPPER  
006d 22 2e 08		            LD      (L082E), HL                         ;STORE SOFT RESET INITIAL CEL  
0070 21 76 00		            LD      HL, L0076                           ;LOAD HL WITH RE-ENTRY ADDRESS  
0073 c3 18 03		            JP      L0318                               ;JUMP TO SAVE REGISTERS  
0076			  
0076			  
0076			;RE-ENTRY POINT AFTER SAVING REGISTERS  
0076 31 20 08		L0076:      LD      SP, L0820                           ;SET STACK (to the Keyboard Buffer??)  
0079 cd f7 02		            CALL    L02F7                               ;CALL RESET PATCH HANDLER  
007c e7			            RST     20H                                 ;LOOK FOR FORCED HARD RESET  
007d 28 07		            JR      Z, L0086                            ;JUMP KEY PRESSED TO HARD RESET  
007f 3a ff 08		            LD      A, (L08FF)                          ;CHECK HARD/RESET FLAG  
0082 fe aa		            CP      0xAA                                ;FOR AA  
0084 28 1c		            JR      Z, L00A2                            ;JUMP TO SOFT RESET IF AA  
0086			  
0086			;HARD RESET  
0086			;MONITOR DEFAULT VARIABLES ARE RE-BOOTED AND USER PATCHES MASKED OFF.  
0086			  
0086 21 0f 07		L0086:      LD      HL, L070F                           ;LOAD HL WITH START OF JMON DEFAULT  
0089 11 20 08		            LD      DE, L0820                           ;VARIABLES ROM TABLE  
008c 01 2b 00		            LD      BC, 0x002B                          ;DE IS THE RAM DE(stination)  
008f ed b0		            LDIR                                        ;AND BC THE COUNT: MOVE TABLE  
0091 06 03		            LD      B, 0x03                             ;MASK OF THE THREE USER PATCHES  
0093 3e c9		            LD      A, 0xC9                             ;BY PUTTING A RETURN AT THE FIRST  
0095 12			L0095:      LD      (DE), A                             ;LOCATION OF EACH  
0096 13			            INC     DE                                  ;  
0097 13			            INC     DE                                  ;  
0098 13			            INC     DE                                  ;  
0099 10 fa		            DJNZ    L0095                               ;  
009b cd d5 06		            CALL    L06D5                               ;INITIALIZE/TEST FOR THE LCD  
009e af			            XOR     A                                   ;CLEAR HARD/SOFT  
009f 32 ff 08		            LD      (L08FF), A                          ;RESET FLAG  
00a2			  
00a2			;THIS SECTION IS THE SOFT RESET SECTION. IT IS ALSO PART OF THE HARD RESET SECTION.  
00a2 21 00 38		L00A2:      LD      HL, L3800                           ;TEST FOR JMON UTILITIES ROM  
00a5 7e			            LD      A, (HL)  
00a6 fe c3		            CP      0xC3                                ;AND CALL ITS RESET ROUTINE  
00a8 cc 00 38		            CALL    Z, L3800                            ;IF REQUIRED  
00ab cd 3c 08		            CALL    L083C                               ;CALL RESET TONE ROUTINE  
00ae af			            XOR     A                                   ;CLEAR MONITOR CONTROL BYTE  
00af 32 2b 08		            LD      (L082B), A                          ;0 = DATA MODE, NO NIBBLES ENTERED  
00b2			  
00b2			;EACH TIME A KEYBOARD INPUT OR USER PATCH "PLANT", IS PROCESSED, THE PROGRAM JUMPS BACK  
00b2			;TO HERE SO THE DISPLAYS MAY BE UP-DATED.  
00b2			  
00b2 2a 2e 08		L00B2:      LD      HL, (L082E)                         ;GET CURRENT EDIT LOCATION (CEL)  
00b5 ed 4b 2c 08	            LD      BC, (L082C)                         ;AND DISPLAY BUFFER ADDRESS  
00b9 cd 30 08		            CALL    L0830                               ;AND CONVERT CEL TO DISPLAY CODE  
00bc 7e			            LD      A, (HL)                             ;AND THEN CONVERT CONTENTS OF  
00bd cd 33 08		            CALL    L0833                               ;CEL TO DISPLAY CODE  
00c0 cd 39 08		            CALL    L0839                               ;CALL THE SET DOTS ROUTINE  
00c3 cd 42 08		            CALL    L0842                               ;CALL SCAN/KEY/LCD/PATCH ROUTINE  
00c6			  
00c6			;THE SECTION BELOW IS EXECUTED WHEN EITHER A KEY OR KEY "PLANT" IS DETECTED IN THE  
00c6			;SCAN/KEY/LCD/PATCH ROUTINE ROUTINE  
00c6			  
00c6 2a 2e 08		            LD      HL, (L082E)                         ;POINT HL TO CURRENT EDIT LOCATION  
00c9 4f			            LD      C, A                                ;PRESERVE INPUT KEY IN C  
00ca 3a 2b 08		            LD      A, (L082B)                          ;GET MONITOR CONTROL BYTE (MCB)  
00cd cb 67		            BIT     4, A                                ;TEST FOR ADDRESS OR FUNCTION MODE  
00cf 47			            LD      B, A                                ;STORE MCB IN B  
00d0 79			            LD      A, C                                ;GET INPUT KEY BACK IN A  
00d1 20 2f		            JR      NZ, L0102                           ;JUMP IF ADDRESS OR FUNCTION MODE  
00d3 fe 10		            CP      0x10                                ;TEST FOR "+"  
00d5 20 0c		            JR      NZ, L00E3                           ;JUMP IF NOT TO TEST FOR "-"  
00d7			  
00d7			;"+" KEY HANDLER-(WHEN IN DATA MODE ONLY)  
00d7			  
00d7 23			            INC     HL                                  ;ADD 1 TO CURRENT EDIT LOCATION  
00d8			  
00d8			;COMMON CEL AND MCB UP-DATER  
00d8			;SEVERAL SECTIONS JUMP HERE TO STORE AN UP-DATED CEL AND CLEAR THE NIBBLE COUNTER.  
00d8			  
00d8 22 2e 08		L00D8:      LD      (L082E), HL                         ;STORE CEL  
00db 78			            LD      A, B                                ;GET MCB  
00dc			  
00dc			;COMMON MCB UP-DATER  
00dc			;SOME KEY HANDLER SECTION THAT DON'T REQUIRE.A NEW CEL (OR HAVE ALREADY STORED IT) JUMP HERE.  
00dc			  
00dc e6 fc		L00DC:      AND     0xFC                                ;CLEAR NIBBLE COUNTER  
00de 32 2b 08		            LD      (L082B), A                          ;STORE MCB  
00e1 18 cf		L00E1:      JR      L00B2                               ;JUMP BACK TO UPDATE DISPLAY  
00e3 fe 11		L00E3:      CP      0x11                                ;TEST FOR "-"  
00e5 20 03		            JR      NZ, L00EA                           ;JUMP IF NOT TO TEST FOR "GO"  
00e7			  
00e7			;"-" KEY HANDLER (WHEN IN DATA MODE ONLY)  
00e7 2b			            DEC     HL                                  ;DECREASE CEL ADDRESS BY ONE  
00e8 18 ee		            JR      L00D8                               ;JUMP TO COMMON CEL AND MCB UP-DATER  
00ea fe 12		L00EA:      CP      0x12                                ;TEST FOR GO  
00ec 20 14		            JR      NZ, L0102                           ;JUMP IF NOT TO TEST FOR "AD"  
00ee			  
00ee			;"GO" HANDLER (WHEN IN DATA MODEONLY)  
00ee 3a 23 08		            LD      A, (L0823)                          ;TEST FOR ALTERNATE GO ADDRESS  
00f1 fe aa		            CP      0xAA                                ;IF (0823)=AA  
00f3 28 05		            JR      Z, L00FA                            ;JUMP IF SET FOR ALTERNATE GO ADDR  
00f5 2a 2e 08		            LD      HL, (L082E)                         ;ELSE GET CURRENT EDIT LOCATION  
00f8 18 03		            JR      L00FD                               ;SKIP ALTERNATE JUMP ADDRESS FETCH  
00fa 2a 28 08		L00FA:      LD      HL, (L0828)                         ;GET ALTERNATE GO ADDRESS  
00fd 11 45 08		L00FD:      LD      DE, L0845                           ;PUT RETURN ADDRESS ON STACK  
0100 d5			            PUSH    DE  
0101 e9			            JP      (HL)                                ;START USER EXECUTION  
0102			  
0102			;TEST HERE FOR ADDRESS KEY. IF THE KEY PRESSED IS NOT THE ADDRESS KEY, THEN A JUMP IS  
0102			;PERFORMED. OTHERWISE THE ADDRESS KEY IS PROCESSED.  
0102			  
0102 fe 13		L0102:      CP      0x13                                ;TEST FOR ADDRESS KEY  
0104 20 0b		            JR      NZ, L0111                           ;0= IF NOT TO DATA KEY HANDLER  
0106 78			            LD      A, B                                ;GET MONITOR CONTROL BYTE (MCB)  
0107 cb 68		            BIT     5, B                                ;TEST FOR FUNCTION MODE AND JUMP TO  
0109 20 02		            JR      NZ, L010D                           ;CLEAR FUNCTION MODE BITS IF SO  
010b ee 10		            XOR     0x10                                ;ELSE TOGGLE ADDRESS MODE BIT  
010d e6 d3		L010D:      AND     0xD3                                ;CLEAR ALL FUNCTION MODE BITS  
010f 18 cb		            JR      L00DC                               ;LOOP BACK TO COMMON MCB UP-DATER  
0111			  
0111			;A TEST FOR ADDRESS/FUNCTION MODE IS DONE. IF IN ADDRESS OR FUNCTION MODE A JUMP IS PERFORMED.  
0111 78			L0111:      LD      A, B                                ;GET MCB  
0112 cb 67		            BIT     4, A                                ;TEST FOR ADDRESS OR FUNCTION MODE  
0114 20 25		            JR      NZ, L013B                           ;JUMP IF EITHER MODE  
0116			  
0116			;A TEST FOR SHIFT IS DONE AND A JUMP IS PERFORMED IF IN THE SHIFT MODE TO THE FUNCTION/SHIFT HANDLER.  
0116 db 00		            IN      A, (KEYBOARD)                       ;TEST FOR THE SHIFT KEY  
0118 cb 6f		            BIT     5, A                                ;AND JUMP IF SHIFT IS PRESSED  
011a 28 34		            JR      Z, L0150                            ;TO THE FUNCTION HANDLER  
011c			  
011c			;ANY TIME A DATA KEY IS PRESSED WHILE IN THE DATA MODE, IT IS PROCESSED STARTING HERE.  
011c 78			            LD      A, B                                ;GET MCB  
011d e6 03		            AND     0x03                                ;MASK IT DOWN TO BYTE COUNTER  
011f fe 02		            CP      0x02                                ;AND TEST FOR TWO NIBBLES ENTERED  
0121 78			            LD      A, B                                ;INPUT KEY VALUE BACK IN A  
0122 20 0e		            JR      NZ, L0132                           ;JUMP IF NOT READY FOR AUTO INC  
0124 f5			            PUSH    AF                                  ;SAVE MCB  
0125 3a 27 08		            LD      A, (L0827)                          ;TEST AUTO INC MASK  
0128 b7			            OR      A                                   ;IF NOT ZERO THEN JUMP AS USER  
0129 20 04		            JR      NZ, L012F                           ;HAS SWITCHED OFF AUTO INC MODE  
012b 23			            INC     HL                                  ;ELSE INCREMENT CEL BEFORE ENTERING  
012c 22 2e 08		            LD      (L082E), HL                         ;NEW NIBBLE AND STORE NEW CEL  
012f f1			L012F:      POP     AF                                  ;RECOVER MON CONTROL BYTE IN A  
0130 e6 fc		            AND     0xFC                                ;CLEAR BYTE COUNTER (BITS 0 AND 1)  
0132 3c			L0132:      INC     A                                   ;ADD ONE TO NIBBLE COUNTER  
0133 32 2b 08		            LD      (L082B), A                          ;STORE IT  
0136 3a 20 08		            LD      A, (L0820)                          ;GET INPUT KEY FROM INPUT BUFFER  
0139 18 11		            JR      L014C                               ;JUMP TO ENTER IT  
013b			  
013b			;TEST HERE FOR A CONTROL KEY WHILE IN EITHER THE ADDRESS OR FUNCTION MODE AND JUMP TO  
013b			;ENCODE THE FUNCTION NUMBER BITS (2 AND 3 OF MCB). IF NOT A CONTROL KEY, THEN TEST FOR  
013b			;THE FUNCTION MODE AND JUMP TO FUNCTION JUMP CONTROL IF SO, ELSE SERVICE DATA KEY FOR  
013b			;ADDRESS MODE.  
013b			  
013b 3a 20 08		L013B:      LD      A, (L0820)                          ;GET INPUT KEY FROM INPUT BUFFER  
013e cb 67		            BIT     4, A                                ;TEST FOR CONTROL KEY (+,- OR GO)  
0140 20 2f		            JR      NZ, L0171                           ;JUMP IF CONTROL TO FUNCTION ENCODER  
0142 cb 68		            BIT     5, B                                ;TEST FUNCTION MODE  
0144 20 0a		            JR      NZ, L0150                           ;JUMP IF SO TO FUNCTION JUMP CONTROL  
0146			  
0146			;DATA KEY PRESS WHILE IN THE ADDRESS MODE  
0146 21 2e 08		            LD      HL, L082E                           ;POINT HL TO CEL BUFFER  
0149 ed 6f		            RLD                                         ;AND SHIFT IN THE NEW NIBBLE  
014b 23			            INC     HL                                  ;AND MOVE THE OTHERS ACROSS  
014c ed 6f		L014C:      RLD                                         ;THIS RLD USED BY DATA MODE ALSO  
014e 18 91		L014E:      JR      L00E1                               ;JUMP (VIA A JUMP) TO UP-DATE DISPLAYS  
0150			  
0150			;FUNCTION AND SHIFT JUMP CONTROL  
0150			;BITS 2 AND 3 OF THE MONITOR CONTROL BYTE (MCB) ARE THE FUNCTION IDENTIFIER BITS.  
0150			;IF BOTH ARE ZERO THEN EITHER FUNCTION 1 IS SELECTED OR NO FUNCTION IS SELECTED. BECAUSE  
0150			;THIS IS THE ALSO THE NO FUNCTION MODE ENABLED STATE, THE SHIFT KEY, WHICH DOES NOT AFFECT  
0150			;THE MONITOR CONTROL BYTE, WILL ALSO WILL INVOKE FUNCTION 1. (THEREFORE THIS ROUTINE DOES  
0150			;NOT NEED TO TEST FOR THE SHIFT KEY).  
0150			;IF BIT 2 IS HIGH THEN FUNCTION 2 IS SELECTED AND IF BIT 3 IS HIGH THEN FUNCTION 3 IS  
0150			;SELECTED.  
0150			;DURING THIS ROUTINE, HL IS LOADED TO THE BASE OF THE REQUIRED JUMP TABLE MINUS TWO BYTES  
0150			;(ONE ENTRY). THIS IS BECAUSE THE OFFSET PROVIDED FROM THE KEYBOARD HAS BEEN INCREMENTED  
0150			;BY ONE. THIS SAVES TESTING FOR ZERO INPUT WHICH WOULD NOT ALLOW THE TABLE ACCESSING TO  
0150			;WORK CORRECTLY. THE REQUIRED BASE IS FOUND BY EXAMINING THE STATE OF THE BITS 2 AND 3 OF  
0150			;THE MONITOR CONTROL BYTE (MCB) AND LOADING HI, ACCORDINGLY.  
0150			;AS EACH ENTRY IS TWO BYTES LONG, THE TABLE POINTER (THE VALUE INSIDE HL), IS INCREMENTED  
0150			;TWICE FOR EACH DECREMENT OF THE INPUT VALUE (FROM THE KEYBOARD). WHEN THE REQUIRED TABLE  
0150			;ENTRY IS FOUND, 17 IS PUT' INSIDE EL (VIA_ DE) AND THE ROUTINE JUMPS TO PART OF THE "GO"  
0150			;KEY ROUTINE TO CREATE A RETURN ADDRESS ON THE STACK AND EXECUTE THE SELECTED ROUTINE.  
0150			  
0150 78			L0150:      LD      A, B                                ;PUT MONITOR CONTROL BYTE IN A  
0151 e6 0c		            AND     0x0C                                ;MASK IT DOWN TO FUNCTION BITS  
0153 21 de 07		            LD      HL, L07DE                           ;JMON FUNCTION JUMP TABLE BASE -2  
0156 28 0a		            JR      Z, L0162                            ;JUMP IF FUNCTION 1 OR SHIFT  
0158 21 be 08		            LD      HL, L08C0                           ;LOAD HL WITH USER TABLE -2  
015b			                                                        ;*** Value is 08BE as User Table is at 08C0  
015b fe 04		            CP      0x04                                ;TEST FOR FUNCTION 2  
015d 28 03		            JR      Z, L0162                            ;JUMP IF FUNCTION 2 (USER FUNCTION)  
015f 21 1e 38		            LD      HL, L381E                           ;OTHERWISE MUST BE FUNCTION 3  
0162 3a 20 08		L0162:      LD      A, (L0820)                          ;GET INPUT KEY FROM INPUT BUFFER  
0165 3c			            INC     A                                   ;ADD ONE IN CASE IT WAS ZERO  
0166 47			            LD      B, A                                ;PUT IN B TO USE AS A LOOP COUNTER  
0167 23			L0167:      INC     HL                                  ;LOOK THROUGH TABLE  
0168 23			            INC     HL                                  ;FOR RIGHT JUMP VECTOR  
0169 10 fc		            DJNZ    L0167  
016b 5e			            LD      E, (HL)                             ;PUT IT IN HL  
016c 23			            INC     HL                                  ;VIA DE  
016d 56			            LD      D, (HL)  
016e eb			            EX      DE, HL                              ;JUMP TO CREATE RETURN ADDRESS AND  
016f 18 8c		            JR      L00FD                               ;EXECUTE SELECTED ROUTINE  
0171			  
0171			;FUNCTION NUMBER ENCODER  
0171			;THIS SECTION ENCODES THE FUNCTION IDENTIFIER BITS (BITS 2 AND 3) IN THE MONITOR CONTROL  
0171			;BYTE (BITS 2 AND 3) THEN SETS THE FUNCTION ENABLE BIT (BIT 5).  
0171			;THE FUNCTION IDENTIFIER BITS ARE DERIVED FROM THE LEAST TWO SIGNIFICANT BITS OF THE INPUT  
0171			;CONTROL KEY (+, AND GO). THESE ARE SHIFTED LEFT TWICE TO ALIGN THEM TO THE FUNCTION  
0171			;SELECT BITS (BITS 2 AND 3) IN THE MCB. THE INPUT CONTROL KEY IS IN THE ACCUMULATOR ON  
0171			;ENTRY AND THE MONITOR CONTROL BYTE (MCB) IN B.  
0171			  
0171 e6 03		L0171:      AND     0x03                                ;MASK DOWN CONTROL KEY  
0173 07			            RLCA                                        ;SHIFT IT LEFT TWICE TO ALIGN BITS 0  
0174 07			            RLCA                                        ;AND 1 TO FUNCTION IDENTITY BITS IN MCB  
0175 f6 20		            OR      0x20                                ;SET FUNCTION MODE ENABLED FLAG  
0177 4f			            LD      C, A                                ;SAVE IN C  
0178 78			            LD      A, B                                ;GET CURRENT MCB  
0179 e6 d3		            AND     0xD3                                ;CLEAR ANY PREVIOUS FUNCTION BITS  
017b b1			            OR      C                                   ;MERGE TOGETHER  
017c 32 2b 08		            LD      (L082B), A                          ;STORE MCB  
017f 18 cd		            JR      L014E                               ;JUMP VIA JUMPS TO UP-DATE DISPLAYS  
0181			  
0181			;THIS IS THE SCAN/KEY/LCD/PATCH ROUTINE. THIS ROUTINE LOOPS SCANNING THE LED DISPLAY AND  
0181			;SERVICING THE "DURING LOOP" USER PATCH UNTIL A KEY PRESS IS VALIDATED BY THE AUTO-KEY  
0181			;REPEAT SECTION. THE INPUT KEY IS RETURNED IN THE ACCUMULATOR AND IN THE INPUT BUFFER AT  
0181			;0820 WITH THE ZERO FLAG SET AND CARRY CLEARED.  
0181			;THREE PATCHES ARE SUPPORTED IN THIS ROUTINE. THEY ARE A PATCH BEFORE LOOP, A PATCH DURING  
0181			;THE LOOP AND A PATCH AFTER A VALID KEY PRESS.  
0181			;THE "PLANT" IS A VALUE INSERTED INTO THE INPUT BUFFER (0820) BY THE DURING LOOP PATCH.  
0181			;THE "PLANT" VALUE IS IDENTIFIED BY BIT 7 OF THE INPUT BUFFER BEING SET. BIT 7 IS RESET  
0181			;BEFORE RETURNING TO SERVICE THE PLANT.  
0181			;THIS ROUTINE USES A BYTE AT 082A, CALLED THE AUTO KEY STATUS BYTE AS A FLAG AND TIMER  
0181			;TO GENERATE THE AUTO REPEAT DELAY.  
0181			  
0181 cd 48 08		            CALL    L0848                               ;CALL LCD ROUTINES  
0184 cd 4b 08		            CALL    L084B                               ;CALL PRE-SCAN USER PATCH  
0187 cd 36 08		L0187:      CALL    L0836                               ;CALL SCAN  
018a cd 4e 08		            CALL    L084E                               ;CALL USER "DURING LOOP" PATCH  
018d 21 20 08		            LD      HL, L0820                           ;TEST KEY INPUT BUFFER BIT 7 FOR A  
0190 cb 7e		            BIT     7, (HL)                             ;"PLANT" INSERTED BY USER DURING  
0192 cb be		            RES     7, (HL)                             ;PATCH: RESET BIT 7 RETURN TO  
0194 c0			            RET     NZ                                  ;SERVICE "PLANT" IF BIT 7 NOT ZERO  
0195 e7			            RST     20H                                 ;TEST FOR KEY PRESS VIA RST 20  
0196 21 2a 08		            LD      HL, L082A                           ;SET HL TO POINT TO AUTO KEY STATUS  
0199 38 04		            JR      C, L019F                            ;JUMP IF A KEY IS PRESSED  
019b 36 80		            LD      (HL), 0x0080                        ;ELSE SET AUTO KEY STATUS TO  
019d 18 e8		            JR      L0187                               ;NO KEY STATE AND CONTINUE LOOP  
019f cd ca 06		L019F:      CALL    L06CA                               ;CALL UNIVERSAL KEY INPUTTER  
01a2 cb 7e		            BIT     7, (HL)                             ;TEST AUTO KEY STATUS FOR FIRST KEY  
01a4 20 10		            JR      NZ, L01B6                           ;JUMP IF SO TO SET LONG KEY DELAY  
01a6 35			            DEC     (HL)                                ;ELSE COUNT DOWN KEY DELAY  
01a7 20 de		            JR      NZ, L0187                           ;LOOP IF NOT READY FOR KEY REPEAT  
01a9 36 0c		            LD      (HL), 0x0C                          ;ELSE SET SHORT TIME DELAY BETWEEN  
01ab cd 51 08		L01AB:      CALL    L0851                               ;KEYS: CALL USER "AFTER KEY" PATCH  
01ae cd 3f 08		            CALL    L083F                               ;CALL KEY TONE  
01b1 af			            XOR     A                                   ;SET ZERO FLAG AND CLEAR CARRY  
01b2 3a 20 08		            LD      A, (L0820)                          ;PUT INPUT KEY IN A  
01b5 c9			            RET                                         ;AND RETURN FOR KEY SERVICE  
01b6 36 70		L01B6:      LD      (HL), 0x0070                        ;SET KEY TIMER FOR LONG DELAY  
01b8 18 f1		            JR      L01AB                               ;JUMP TO SERVICE PATCH, TONE ETC.  
01ba			  
01ba			;THIS IS THE LED SCAN ROUTINE.  
01ba 06 20		            LD      B, 20H                              ;B IS THE SCAN BIT  
01bc 2a 2c 08		            LD      HL, (L082C)                         ;GET ADDRESS OF DISPLAY BUFFER  
01bf 7e			L01BF:      LD      A, (HL)                             ;GET FIRST BYTE  
01c0 d3 02		            OUT     (DSEGMENT), A                       ;AND OUTPUT IT TO SEGMENTS  
01c2 78			            LD      A, B                                ;GET SCAN BIT  
01c3 d3 01		            OUT     (DSCAN), A                          ;OUTPUT IT TO COMMONS  
01c5 06 40		            LD      B, 40H                              ;CREATE SHORT  
01c7 10 fe		L01C7:      DJNZ    L01C7                               ;DELAY IN B  
01c9 23			            INC     HL                                  ;INCREASE HL TO NEXT DISPLAY BYTE  
01ca 47			            LD      B, A                                ;GET SCAN BIT BACK IN B  
01cb af			            XOR     A                                   ;CLEAR THE LAST PORT OUTPUTTED TO  
01cc d3 01		            OUT     (DSCAN), A                          ;TO PREVENT "GHOSTING"  
01ce cb 08		            RRC     B                                   ;SHIFT SCAN BIT ACROSS TO NEXT  
01d0 30 ed		            JR      NC, L01BF                           ;COMMON: WHEN SCAN BIT FALLS INTO  
01d2 d3 02		            OUT     (DSEGMENT), A                       ;CARRY SCAN IS TERMINATED: CLEAR  
01d4 c9			            RET                                         ;PORT 2 AND RETURN  
01d5			  
01d5			;THIS ROUTINE CONVERTS HL TO DISPLAY CODE AND STORE THE DISPLAY CODE IN A BUFFER POINTED TO BY BC.  
01d5 7c			            LD      A, H                                ;PUT H IN A  
01d6 cd 33 08		            CALL    L0833                               ;CONVERT A TO DISPLAY CODE  
01d9 7d			            LD      A, L                                ;NOW DO FOR L  
01da			  
01da			;THIS SECTION CONVERTS THE BYTE IN A TO TWO DISPLAY BYTES.  
01da f5			            PUSH    AF                                  ;SAVE A  
01db 07			            RLCA                                        ;SHIFT MSN TO LSN PLACE  
01dc 07			            RLCA                                        ;FOR NIBBLE AT A TIME CONVERSION  
01dd 07			            RLCA  
01de 07			            RLCA  
01df cd e3 01		            CALL    L01E3                               ;CONVERT FIRST NIBBLE  
01e2 f1			            POP     AF                                  ;RECOVER A TO CONVERT SECOND NIBBLE  
01e3 e6 0f		L01E3:      AND     0x0F                                ;MASK OF HIGH NIBBLE  
01e5 11 d0 07		            LD      DE, 07D0H                           ;SET DE TO BASE OF CONVERSION  
01e8 83			            ADD     A, E                                ;TABLE: ADD A TO BASE  
01e9 5f			            LD      E, A                                ;UPDATE POINTER  
01ea 1a			            LD      A, (DE)                             ;GET DISPLAY CODE  
01eb 02			            LD      (BC), A                             ;STORE IN DISPLAY BUFFER  
01ec 03			            INC     BC                                  ;INCREMENT DISPLAY BUFFER POINTER  
01ed c9			            RET                                         ;NIBBLE CONVERSION DONE  
01ee			  
01ee			;SET DOTS  
01ee			;THIS ROUTINE SETS THE DOTS IN THE DISPLAY BUFFER. IF IN ADDRESS MODE THEN 4 DOTS ARE SET  
01ee			;IN THE ADDRESS DISPLAY BUFFER, IF IN A FUNCTION MODE, THEN ONE DOT IN THE ADDRESS DISPLAY  
01ee			;- RIGHT MOST FOR FUNCTION 1 SECOND RIGHT FOR FUNCTION 2 AND THIRD RIGHT FOR FUNCTION 3.  
01ee			;IF IN THE DATA MODE THEN 2 DOTS IN THE DATA DISPLAY BUFFER OR ONE DOT, ON THE RIGHTMOST  
01ee			;DISPLAY, IF TWO NIBBLES HAVE BEEN ENTERED AND IN THE AUTO-INCREMENT MODE.  
01ee			  
01ee 06 02		            LD      B, 0x02                             ;SET B FOR 2 DOTS  
01f0 2a 2c 08		            LD      HL, (L082C)                         ;PUT DISPLAY BUFFER IN HL  
01f3 3a 2b 08		            LD      A, (L082B)                          ;GET MONITOR CONTROL BYTE (MCB)  
01f6 cb 67		            BIT     4, A                                ;TEST FOR ADDRESS OR FUNCTION MODE  
01f8 28 1a		            JR      Z, L0214                            ;JUMP IF NOT TO DO DATA DOTS  
01fa cb 6f		            BIT     5, A                                ;TEST ONLY FOR FUNCTION MODE  
01fc 20 08		            JR      NZ, L0206                           ;JUMP IF FUNCTION MODE  
01fe 06 04		            LD      B, 4                                ;ADDRESS MODE SO SET B FOR 4 DOTS  
0200 cb e6		L0200:      SET     4, (HL)                             ;SET DOT IN DISPLAY BUFFER  
0202 23			            INC     HL                                  ;NEXT LOCATION  
0203 10 fb		            DJNZ    L0200                               ;DO 4 TIMES  
0205 c9			            RET                                         ;DONE  
0206			  
0206 05			L0206:      DEC     B                                   ;FUNCTION MODE: SET B FOR ONE DOT  
0207 cb 5f		            BIT     3, A                                ;TEST FOR FUNCTION 3  
0209 20 06		            JR      NZ, L0211                           ;JUMP IF FUNCTION 3 TO ADD HL+1  
020b cb 57		            BIT     2, A                                ;TEST FOR FUNCTION 2  
020d 20 01		            JR      NZ, L0210                           ;JUMP IF FUNCTION 2 TO ADD HL+2  
020f 23			L020F:      INC     HL                                  ;INCREMENT HL TO POINT TO THE  
0210 23			L0210:      INC     HL                                  ;REQUIRED DISPLAY BYTE  
0211 23			L0211:      INC     HL                                  ;  
0212 18 ec		            JR      L0200                               ;JUMP TO SET DOT  
0214 23			L0214:      INC     HL                                  ;DATA MODE: HL NOW POINTS TO SECOND  
0215 4f			            LD      C, A                                ;LEFT MOST DISPLAY BUFFER: SAVE MCB  
0216 3a 27 08		            LD      A, (L0827)                          ;IN C: TEST AUTO INCREMENT ENABLE  
0219 b7			            OR      A                                   ;FLAG  
021a 20 f3		            JR      NZ, L020F                           ;JUMP IF NO AUTO INCREMENT TO SET BOTH  
021c cb 49		            BIT     1, C                                ;DATA DOTS: TEST BYTE COUNTER FOR 2  
021e 28 ef		            JR      Z, L020F                            ;NIBBLES: JUMP IF NOT TO SET BOTH DATA  
0220 23			            INC     HL                                  ;DOTS: ELSE SKIP DOT ON ONE DISPLAY  
0221 05			            DEC     B                                   ;AND DECREASE DOT COUNT FROM 2 TO 1  
0222 18 eb		            JR      L020F                               ;JUMP TO ADJUST HL AND SET DOTS  
0224			  
0224			;MASKABLE RESET TONE ROUTINE  
0224			;IF 0822 IS NOT ZERO THEN NO TONE  
0224 cd 3f 08		            CALL    L083F                               ;CALL TONE  
0227			  
0227			;MASKABLE TONE ROUTINE  
0227 3a 22 08		            LD      A, (L0822)                          ;TEST SOUND MASK  
022a b7			            OR      A                                   ;  
022b c0			            RET     NZ                                  ;NO TONE IF NOT ZERO  
022c 0e 40		            LD      C, 0x40                             ;LOAD C WITH PERIOD  
022e 2e 31		            LD      L, 0x31                             ;LOAD L WITH NUMBER OF CYCLES  
0230 af			            XOR     A                                   ;CLEAR A  
0231 d3 01		L0231:      OUT     (DSCAN), A                          ;OUT TO SPEAKER  
0233 41			            LD      B, C                                ;  
0234 10 fe		L0234:      DJNZ    L0234                               ;DELAY FOR PERIOD  
0236 ee 80		            XOR     0x80                                ;TOGGLE SPEAKER BIT  
0238 2d			            DEC     L                                   ;DECREMENT CYCLE COUNT  
0239 20 f6		            JR      NZ, L0231                           ;LOOP UNTIL ZERO  
023b c9			            RET                                         ;DONE  
023c			  
023c			;LCD ROUTINE  
023c			;IF 0821 IS NOT ZERO, THEN LCD HAS BEEN MASKED OFF BY EITHER THE USER OR THE LCD  
023c			;INTIALIZER/TESTER ROUTINE AND NO ACTION IS TAKEN ON THE LCD. THE RST 30 (F7) IS USED  
023c			;EXTENSIVELY TO TEST AND WAIT FOR THE LCD BUSY FLAG. THROUGHOUT THESE NOTES, THE INVISIBLE  
023c			;INTERNAL CURSOR ON THE LCD IS REFERRED TO AS THE CURSOR, WHILE THE ">" ON THE LCD IS  
023c			;REFERRED TO AS THE PROMPT.  
023c			  
023c 3a 21 08		            LD      A, (L0821)                          ;TEST LCD MASK  
023f b7			            OR      A  
0240 c0			            RET     NZ                                  ;NOT ZERO = LCD NOT REQUIRED OR FITTED  
0241 3e 80		            LD      A, 0x80                             ;SET LCD CURSOR TO HOME  
0243 d3 04		            OUT     (LCDINST), A  
0245 f7			            RST     30H                                 ;WAIT UNTIL LCD READY  
0246 cd 53 02		            CALL    L0253                               ;CALL SET-UP AND OUTPUT FIRST LINE  
0249 3e c0		            LD      A, 0xC0                             ;SET CURSOR TO BOTTOM LINE  
024b d3 04		            OUT     (LCDINST), A  
024d f7			            RST     30H                                 ;WAIT  
024e cd 5a 02		            CALL    L025A                               ;CALL ROUTINE TO OUTPUT BOTTOM LINE  
0251 18 33		            JR      L0286                               ;JUMP TO PROMPT ROUTINE  
0253			  
0253			;SET-UP  
0253			;MODIFY CURRENT EDIT LOCATION ADDRESS IN HL SO THAT IT POINTS TO A BYTE AT AN ADDRESS  
0253			;ENDING IN EITHER 0 OR 8.  
0253			  
0253 2a 2e 08		L0253:      LD      HL, (L082E)                         ;GET CEL AND PUT LOW BYTE IN A  
0256 7d			            LD      A, L                                ;THEN MASK OFF THE 3 LOWEST BITS  
0257 e6 f8		            AND     0xF8                                ;AS THE ADDR OF THE FIRST BYTE ON  
0259 6f			            LD      L, A                                ;THE LCD WILL END WITH 0 OR 8  
025a			  
025a			;OUTPUT A LINE  
025a cd 6c 02		L025A:      CALL    L026C                               ;CALL "HI TO ASCII OUTPUT"  
025d 06 04		            LD      B, 04                               ;SET B FOR 4 BYTES ON A LINE  
025f 3e 20		L025F:      LD      A, 0x20                             ;LOAD A WITH ASCII SPACE  
0261 d3 84		            OUT     (LCDDATA), A                        ;CHARATER AND OUTPUT IT  
0263 f7			            RST     30H                                 ;WAIT  
0264 7e			            LD      A, (HL)                             ;GET BYTE TO DISPLAY  
0265 cd 71 02		            CALL    L0271                               ;CONVERT AND OUTPUT IT  
0268 23			            INC     HL                                  ;POINT TO NEXT BYTE  
0269 10 f4		            DJNZ    L025F                               ;DO FOR 4 BYTES  
026b c9			            RET                                         ;DONE  
026c			  
026c			;CONVERT HL TO ASCII (VIA CONVERT A) AND OUTPUT IT  
026c 7c			L026C:      LD      A, H                                ;CONVERT AND  
026d cd 71 02		            CALL    L0271                               ;OUTPUT H  
0270 7d			            LD      A, L                                ;THEN L  
0271			  
0271			;CONVERT A TO ASCII AND OUTPUT IT  
0271 f5			L0271:      PUSH    AF                                  ;SAVE A FOR SECOND NIBBLE  
0272 0f			            RRCA                                        ;SHIFT HIGH NIBBLE ACROSS  
0273 0f			            RRCA                                        ;  
0274 0f			            RRCA                                        ;  
0275 0f			            RRCA                                        ;  
0276 cd 7a 02		            CALL    L027A                               ;CALL NIBBLE CONVERTER  
0279 f1			            POP     AF                                  ;RECOVER LOW NIBBLE  
027a e6 0f		L027A:      AND     0x0F                                ;MASK OFF HIGH NIBBLE  
027c c6 90		            ADD     A, 0x90                             ;CONVERT TO  
027e 27			            DAA                                         ;ASCII  
027f ce 40		            ADC     A, 0x40                             ;USING THIS  
0281 27			            DAA                                         ;AMAZING ROUTINE  
0282 d3 84		L0282:      OUT     (LCDDATA), A                        ;OUTPUT IT  
0284 f7			            RST     30H                                 ;WAIT  
0285 c9			            RET                                         ;DONE  
0286			  
0286			;LCD PROMPT AND MODE WORD OUTPUT  
0286			;THE 3 LOWEST BITS OF THE CURRENT EDIT LOCATION (CEL) ARE USED AS A DISPLACEMENT WHICH IS  
0286			;ADDED TO A TABLE BASE. THE TABLE ENTRIES ARE THE LCD ADDRESSES OF THE PROMPT LOCATIONS.  
0286			;IF THE AUTO INCREMENT MODE IS ON AND 2 NIBBLES HAVE BEEN ENTERED, THE DISPLACEMENT IS  
0286			;INCREMENTED SO THAT THE NEXT PROMPT ADDRESS TABLE ENTRY WILL BE ACCESSED TO MOVE THE  
0286			;PROMPT TO ITS NEXT SCREEN LOCATION. THE TABLE IS 9 ENTRIES LONG. 8 ARE FOR THE SPACES  
0286			;BETWEEN THE DATA BYTES AND THE NINTH IS TO PARK THE PROMPT AT THE TOP LEFT-HAND CORNER  
0286			;WHEN A SCREEN CHANGE IS DUE  
0286			  
0286 3a 2e 08		L0286:      LD      A, (L082E)                          ;GET LOW BYTE OF CEL  
0289 e6 07		            AND     0x07                                ;MASK IT DOWN TO THE 3 LOWEST BITS  
028b 4f			            LD      C, A                                ;SAVE IN C  
028c 3a 27 08		            LD      A, (L0827)                          ;TEST FOR AUTO INCREMENT MODE  
028f b7			            OR      A                                   ;O=ON  
0290 3a 2b 08		            LD      A, (L082B)                          ;GET MCB  
0293 57			            LD      D, A                                ;PUT MCB IN D  
0294 20 05		            JR      NZ, L029B                           ;JUMP IF AUTO INCREMENT MODE OFF  
0296 cb 4f		            BIT     1, A                                ;TEST FOR 2 NIBBLES ENTERED: JUMP  
0298 28 01		            JR      Z, L029B                            ;IF NOT: ELSE INCREMENT  
029a 0c			            INC     C                                   ;DISPLACEMENT TO ADVANCE TO  
029b 79			L029B:      LD      A, C                                ;NEXT PROMPT LOCATION ADDRESS  
029c 21 bd 07		            LD      HL, L07BD                           ;LOAD HL WITH BASE OF PROMPT  
029f 85			            ADD     A, L                                ;TABLE AND ADD DISPLACEMENT  
02a0 6f			            LD      L, A                                ;PUT LOW BYTE OF TABLE ADDRESS  
02a1 7e			            LD      A, (HL)                             ;IN L AND GET PROMPT ADDRESS IN A  
02a2 d3 04		            OUT     (LCDINST), A                        ;AND OUTPUT PROMPT ADDRESS TO LCD  
02a4 f7			            RST     30H                                 ;WAIT  
02a5 3e 3e		            LD      A, 0x3E                             ;LOAD A WITH ASCII FOR ">"  
02a7 d3 84		            OUT     (LCDDATA), A                        ;OUTPUT PROMPT  
02a9 f7			            RST     30H                                 ;WAIT  
02aa			  
02aa			;OUTPUT MODE WORD TO BOTTOM LEFT CORNER OF THE LCD.  
02aa			;IF THE MODE IS EITHER DATA OR ADDR, THEN THE FOUR ASCII BYTES ARE OUTPUTTED. IF IN THE  
02aa			;FUNCTION MODE, THEN ONLY THREE BYTES FROM THE TABLE ARE OUTPUTTED AND THEN THE FUNCTION  
02aa			;NUMBER IS CALCULATED AND OUTPUTTED.  
02aa			;NOTICE THAT FROM THE TABLE BASE THE FIRST ENTRY (DATA) HAS A ZERO DISPLACEMENT WHILE THE  
02aa			;SECOND (ADDR) HAS A DISPLACEMENT OF 4 AND THE THIRD (Fs-) HAS A DISPLACEMENT OF 12.  
02aa			;IF YOU LOOK AT THE TABLE AT 07AD, YOU WILL SEE THAT IT IS STAGGERED WITH THE THIRD ENTRY  
02aa			;12 BYTES AWAY FROM THE BASE.  
02aa			  
02aa 3e c0		            LD      A, 0xC0                             ;SET CURSOR TO BOTTOM LINE  
02ac d3 04		            OUT     (LCDINST), A                        ;OUTPUT  
02ae f7			            RST     30H                                 ;AND WAIT  
02af 7a			            LD      A, D                                ;PUT MONITOR CONTROL BYTE (MCB) IN A  
02b0 0f			            RRCA                                        ;SHIFT MODE BITS TO BITS 2 AND 3  
02b1 0f			            RRCA                                        ;TO USE AS TABLE DISPLACEMENT  
02b2 57			            LD      D, A                                ;SAVE IN D AND MASK OFF ALL BITS  
02b3 e6 0c		            AND     0x0C                                ;EXCEPT THE 2 THAT FLAG BETWEEN DATA,  
02b5 21 ad 07		            LD      HL, L07AD                           ;ADDR AND FUNCTION: A=0 IF DATA, 4 IF  
02b8 85			            ADD     A, L                                ;ADDR, 12 IF FUNCTION, NOTE THAT TABLE  
02b9 6f			            LD      L, A                                ;IS STAGGERED (SEE 07AD): ADD A TO BASE  
02ba fe b9		            CP      0xB9                                ;IF A=B9 THEN MODE IS FUNCTION MODE  
02bc 01 84 04		            LD      BC, 0484H                           ;LOAD C WITH PORT, B WITH BYTE COUNT  
02bf 28 06		            JR      Z, L02C7                            ;JUMP IF FUNCTION MDDE TO OUT 3 BYTES  
02c1 ed a3		L02C1:      OUTI                                        ;OUT (HL) TO (C) B=B-1  
02c3 f7			            RST     30H                                 ;HL=HL+1: WAIT FOR LCD BUSY FLAG  
02c4 20 fb		            JR      NZ, L02C1                           ;LOOP UNTIL B=0  
02c6 c9			            RET                                         ;DONE  
02c7			  
02c7 06 03		L02C7:      LD      B, 0x03                             ;ONLY THREE BYTES FOR FUNCTION MODE  
02c9 cd c1 02		            CALL    L02C1                               ;CALL THE OUTPUT ROUTINE ABOVE  
02cc 7a			            LD      A, D                                ;PUT MCB (SHIFTED RIGHT TWICE) IN A  
02cd e6 03		            AND     0x03                                ;MASK IT DOWN TO GET JUST THE FUNCTION  
02cf c6 31		            ADD     A, 0x31                             ;NUMBER BITS: ADD ASCII "1"  
02d1 18 af		            JR      L0282                               ;JUMP TO OUTPUT FUNCTION NUMBER  
02d3			  
02d3			;-END OF MONITOR ROUTINES- (EXCEPT KEYBOARD READER AT 06AD)  
02d3			  
02d3			;LCD PROMPT MOVING ROUTINES. (SHIFT AND FUNCTION 1)  
02d3			;THESE ROUTINES ALTER THE CURRENT EDIT LOCATION ADDRESS AND STORE IT IN ITS BUFFER. WHEN  
02d3			;THE RETURN IS DONE, JMON IS RE-ENTERED AT 00132 (VIA THE SOFT RE-ENTRY JUMP AT L0845, THE  
02d3			;ADDRESS OF WHICH HAS BEEN PLACED ON THE STACK BY PART OF THE "GO" ROUTINE).  
02d3			  
02d3 11 04 00		            LD      DE, 0x0004                          ;DE= +4  
02d6 2a 2e 08		L02D6:      LD      HL, (L082E)                         ;PUT CEL IN HL  
02d9 19			            ADD     HL, DE                              ;ADD TO GET NEW CEL  
02da 22 2e 08		            LD      (L082E), HL                         ;STORE IN CEL BUFFER  
02dd c9			            RET                                         ;DONE  
02de			  
02de 11 fc ff		            LD      DE, 0xFFFC                          ;DE= -4  
02e1 18 f3		            JR      L02D6                               ;JUMP TO ADD  
02e3 11 ff ff		            LD      DE, 0xFFFF                          ;DE= -1  
02e6 18 ee		            JR      L02D6                               ;JUMP TO ADD  
02e8 11 01 00		            LD      DE, 0x0001                          ;DE= +1  
02eb 18 e9		            JR      L02D6                               ;JUMP TO ADD  
02ed 11 08 00		            LD      DE, 0x0008                          ;DE= +8  
02f0 18 e4		            JR      L02D6                               ;JUMP TO ADD  
02f2 11 f8 ff		            LD      DE, 0xFFF8                          ;DE= -8  
02f5 18 df		            JR      L02D6                               ;JUMP TO ADD  
02f7			  
02f7			;RESET PATCH CHECKER.  
02f7			;TESTS FOR PATCH REQUIREMENT AND UP TO THE FIRST 256 BYTES OF THE PATCH ROUTINE. THE  
02f7			;CHECKSUM FEATURE ENSURES A WAY TO CHECK THAT THE PATCH OR PATCH VARIABLES HAVE NOT BEEN  
02f7			;CORRUPTED BY A SYSTEM CRASH, OTHERWISE YOU MAY NEVER REGAIN CONTROL OF THE COMPUTER UNLESS  
02f7			;YOU TURN IT OFF, (AND LOSE THE CONTENTS OF YOUR MEMORY - YOU CANNOT RECOVER IT BY A FORCED  
02f7			;HARD RESET AS THE USER PATCH IS EXECUTED BEFORE THE FORCED HARD RESET TEST). (A FORCED  
02f7			;HARD RESET IS WHEN A KEY IS HELD DOWN WHEN THE RESET KEY IS RELEASED).  
02f7			;IF YOU HAVE A NON VOLATILE MEMORY AT 0800 THE SITUATION WOULD BE ABSOLUTELY HOPELESS  
02f7			;WITHOUT THIS CHECKER ROUTINE.  
02f7			;A VARIABLE CAN BE PASSED TO YOUR PATCH ROUTINE IN THE "C" REGISTER. TO DO THIS THE VARIABLE  
02f7			;IS PLACED AT ADDRESS LOCATION 08B3.  
02f7			  
02f7 3a b0 08		L02F7:      LD      A, (L08B0)                          ;TEST FOR RESET PATCH REQUIRED  
02fa fe aa		            CP      0xAA  
02fc c0			            RET     NZ                                  ;RETURN IF NOT  
02fd ed 4b b3 08	            LD      BC, (L08B3)                         ;PUT NO OF BYTES IN B VARIABLE IN C  
0301 2a b1 08		            LD      HL, (L08B1)                         ;START IN HL  
0304 af			            XOR     A                                   ;CLEAR A  
0305 86			L0305:      ADD     A, (HL)                             ;ADD CHECKSUM  
0306 23			            INC     HL  
0307 10 fc		            DJNZ    L0305                               ;UNTIL B=0  
0309 21 b5 08		            LD      HL, L08B5                           ;POINT TO REQUIRED CHECKSUM  
030c be			            CP      (HL)                                ;TEST FOR EQUAL  
030d c0			            RET     NZ                                  ;ABORT IF NOT  
030e 2a b6 08		            LD      HL, (L08B6)                         ;ELSE GET START ADDR  
0311 e9			            JP      (HL)                                ;AND DO RESET PATCH  
0312			  
0312			;STEPPER ROUTINE  
0312			;THE STEPPER ROUTINE IS BROKEN UP INTO SEVERAL SECTIONS. THE FIRST IS THE REGISTER SAVE,  
0312			;WHERE ALL THE Z80 USER REGISTERS ARE STORED IN MEMORY.  
0312			  
0312 22 70 08		L0312:      LD      (L0870), HL             ;STORE HL IN ITS REGISTER STACK SPOT  
0315 21 44 03		            LD      HL, L0344               ;LOAD HL WITH RETURN ADDRESS - Was 0x0344  
0318			  
0318			;MONITOR JUMPS TO HERE ON RESET TO PRESERVE USER REGISTERS.  
0318 22 60 08		L0318:      LD      (L0860), HL                         ;STORE RE-ENTRY ADDRESS IN BUFFER  
031b 2a 58 08		            LD      HL, (L0858)                         ;GET ADDRESS OF INSTRUCTION JUST  
031e 22 68 08		            LD      (L0868), HL                         ;STEPPED AND PUT IT IN "NEXT PC"  
0321 ed 73 7e 08	            LD      (L087E), SP                         ;BUFFER: SAVE STACK POINTER VALUE  
0325 e1			            POP     HL                                  ;GET RETURN ADDR, THIS IS THE ADDRESS  
0326 22 58 08		            LD      (L0858), HL                         ;OF NEXT BYTE TO STEP: STORE IN  
0329 31 7e 08		            LD      SP, L087E                           ;"NEXT PC" BUFFER: LOAD REGISTER DUMP  
032c 08			            EX      AF, AF'                             ;STACK: PUSH ALTERNATE REGISTERS  
032d d9			            EXX                                         ;FIRST  
032e e5			            PUSH    HL                                  ;SAVE ALL REGISTERS  
032f d5			            PUSH    DE  
0330 c5			            PUSH    BC  
0331 f5			            PUSH    AF  
0332 fd e5		            PUSH    IY  
0334 dd e5		            PUSH    IX  
0336 08			            EX      AF, AF'  
0337 d9			            EXX  
0338 3b			            DEC     SP  
0339 3b			            DEC     SP  
033a d5			            PUSH    DE  
033b c5			            PUSH    BC  
033c f5			            PUSH    AF  
033d 2a 60 08		            LD      HL, (L0860)                         ;RE-ENTER CALLING ROUTINE VIA  
0340 e9			            JP      (HL)                                ;THE ADDRESS IT SUPPLIED AT 0860  
0341 31 6a 08		            LD      SP, L086A                           ;SHIFT 7 ROUTINE START (REG DISPLAY)  
0344			  
0344			;THE REGISTERS HAVE BEEN SAVED. NOW THE DISPLAY AND KEYBOARD HANDLER IS SET UP. THE STACK  
0344			;IS DECREMENTED BY TWO TO POINT TO THE "PC" BUFFER. THE ADDRESS IN THE "PC" BUFFER IS THE  
0344			;ADDRESS OF THE INSTRUCTION JUST STEPPED.  
0344			;THE NUMBER OF THE FIRST REGISTER (1 FOR "PC") IS PUT INTO THE CURRENT REGISTER NUMBER  
0344			;BUFFER.  
0344			  
0344 21 06 08		L0344:      LD      HL, L0806                           ;CREATE NEW DISPLAY BUFFER  
0347 22 2c 08		            LD      (L082C), HL                         ;  
034a 3b			            DEC     SP                                  ;DECREASE SP BY 2 TO POINT TO THE  
034b 3b			            DEC     SP                                  ;"PC" BUFFER  
034c			  
034c			;WHEN UP-DATING THE DISPLAY, THE ROUTINE MAY JUMP BACK TO HERE IF THE FIRST DISPLAY IS REQUIRED.  
034c 3e 01		L034C:      LD      A, 0x01                             ;SET UP FOR THE FIRST REGISTER (PC)  
034e 32 5a 08		            LD      (L085A), A                          ;DISPLAY  
0351			  
0351			;OR HERE IF IT HAS ALTERED THE CURRENT REGISTER NUMBER IN ITS STORAGE LOCATION (085A).  
0351 3a 5a 08		L0351:      LD      A, (L085A)                          ;DISPLAY LOOP STARTS HERE  
0354			  
0354			;HL IS LOADED WITH THE STACK POINTER VALUE, (WHICH POINTS TO THE "PC" BUFFER), MINUS TWO.  
0354			;THE TWO IS SUBTRACTED BECAUSE AN EXTRA TWO WILL BE ADDED TO HL DURING THE REGISTER BUFFER  
0354			;CALCULATOR (IMMEDIATELY BELOW) AS THE NUMBER OF THE FIRST REGISTER IS 1 AND NOT ZERO.  
0354 21 fe ff		            LD      HL, 0xFFFE                          ;HL=-2  
0357 39			            ADD     HL, SP                              ;HL=SP-2  
0358 23			L0358:      INC     HL                                  ;INCREMENT HL TO POINT TO THE  
0359 23			            INC     HL                                  ;CURRENT REGISTER BUFFER  
035a 3d			            DEC     A                                   ;INDICATED BY THE NUMBER IN A  
035b 20 fb		            JR      NZ, L0358  
035d			  
035d			;HL NOW POINTS TO THE CURRENT REGISTER BUFFER. THIS SECTION PUTS THE REGISTER(S) CONTENT(S)  
035d			;INTO HL AND CONVERTS IT TO DISPLAY CODE AND STORE THE DISPLAY CODE IN THE DISPLAY BUFFER.  
035d			  
035d 7e			            LD      A, (HL)                             ;GET 16 BIT VALUE  
035e 23			            INC     HL                                  ;AND PUT IT  
035f 66			            LD      H, (HL)                             ;BACK INTO  
0360 6f			            LD      L, A                                ;HL  
0361 ed 4b 2c 08	            LD      BC, (L082C)                         ;PUT DISPLAY BUFFER ADDRESS IN BC  
0365 cd 30 08		            CALL    L0830                               ;CALL HL TO DISPLAY CODE ROUTINE  
0368			  
0368			;THIS SECTION CALCULATES THE ADDRESS OF THE REGISTER NAME FOR THE DATA DISPLAYS. THESE  
0368			;ARE STORED IN A TABLE. THE REQUIRED REGISTER NAME IS THEN TRANSFERRED TO THE DISPLAY  
0368			;BUFFER.  
0368			  
0368 3a 5a 08		            LD      A, (L085A)                          ;GET REGISTER NUMBER  
036b c5			            PUSH    BC                                  ;PUT NEXT DISPLAY BUFFER  
036c d1			            POP     DE                                  ;LOCATION INTO DE(stination)  
036d 01 02 00		            LD      BC, 0x0002                          ;BC IS THE NUMBER OF DATA DISPLAYS  
0370 21 92 07		            LD      HL, L0792                           ;HL=THE BASE OF THE NAME TABLE  
0373 09			L0373:      ADD     HL, BC                              ;ADD TO HL 2 FOR EACH  
0374 3d			            DEC     A                                   ;REGISTER NUMBER TO ACCESS THE  
0375 20 fc		            JR      NZ, L0373                           ;CURRENT REGISTER NAME  
0377 ed b0		            LDIR                                        ;MOVE REGISTER NAME INTO RAM  
0379			  
0379			;THE SCAN AND KEYBOARD ROUTINE ARE NOW CALLED (VIA THE RST 18). IF A VALID KEY IS PRESSED,  
0379			;THEN THE ZERO FLAG IS SET WHEN THE RST RETURNS.  
0379			  
0379 df			L0379:      RST     18H                                 ;SCAN/KEY READ RST  
037a 21 24 08		            LD      HL, L0824                           ;(HL)=AUTO STEP CONTROL/TIMER BYTE  
037d 28 0b		            JR      Z, L038A                            ;JUMP IF VALID KEY PRESSED  
037f			  
037f			;NO KEY IS PRESSED SO THE ROUTINE CHECKS FOR THE AUTO REPEAT MODE ENABLED FLAG (BIT 7 AUTO  
037f			;STEP CONTROL/TIMER BYTE, ZERO IS AUTO STEP ENABLED) AND DECREMENTS THE COUNTER IF IT IS.  
037f			;IF THE COUNTER REACHES ZERO, THEN IT IS RELOADED AND THE ROUTINE JUMPS TO RECOVER THE  
037f			;REGISTERS AND STEP THE NEXT INSTRUCTION. IF NOT IN THE AUTO MODE OR THE COUNTER DOES NOT  
037f			;REACH ZERO, THEN THE ROUTINE LOOPS BACK TO SCAN THE DISPLAY AND WAIT FOR EITHER A KEY  
037f			;PRESS OR FOR THE COUNTER TO REACH ZERO.  
037f			  
037f cb 7e		            BIT     7, (HL)                             ;TEST FOR AUTO INCREMENT JUMP IF NOT  
0381 20 f6		            JR      NZ, L0379                           ;ENABLED TO SCAN/KEY READ LOOP  
0383 35			            DEC     (HL)                                ;DECREMENT COUNTER: LOOP TO  
0384 20 f3		            JR      NZ, L0379                           ;SCAN/KEY READ UNTIL COUNT=0  
0386			  
0386			;AT THIS POINT THE AUTO-STEP DELAY HAS REACHED ZERO AND IS RELOADED WITH THE DELAY VALUE.  
0386			;A JUMP IS THEN DONE TO RECOVER THE REGISTERS AND STEP THE NEXT INSTRUCTION.  
0386 36 30		            LD      (HL), 0x0030                        ;RESET AUTO STEP DELAY, JUMP TO RECOVER  
0388 18 22		            JR      L03AC                               ;REGISTERS AND STEP NEXT INSTRUCTION  
038a			  
038a			;KEY PROCESSING STARTS HERE  
038a			;THE AUTO-STEP IS DISABLED AND THEN THE KEY IS IDENTIFIED AND HANDLED.  
038a			;THE AUTO-STEP WILL BE RE-ENABLED IF THE KEY PRESSED IS A DATA KEY.  
038a			  
038a 47			L038A:      LD      B, A                                ;SAVE KEY  
038b 36 ff		            LD      (HL), 0x00FF                        ;SET AUTO STEP CONTROL/TIMER BIT 7  
038d 21 5a 08		            LD      HL, L085A                           ;THUS DISABLING THE AUTO REPEAT MODE  
0390 78			            LD      A, B                                ;POINT HI, TO CURRENT REG No. BUFFER  
0391 fe 10		            CP      0x10                                ;PUT INPUT IN A,TEST IT FOR "+"  
0393 20 08		            JR      NZ, L039D                           ;JUMP IF NOT TO TEST FOR "-"  
0395			  
0395			;"+" KEY HANDLER  
0395			;THE CURRENT REGISTER NUMBER IS INCREMENTED AND THEN CHECK TO SEE THAT IT HAS NOT EXCEEDED  
0395			;THE HIGHEST REGISTER NUMBER (OC). IF IT HAS, THE ROUTINE JUMPS TO RESET THE CURRENT  
0395			;REGISTER NUMBER WITH 1, OTHERWISE IT JUMPS TO THE DISPLAY LOOP.  
0395			  
0395 34			            INC     (HL)                                ;INCREMENT REGISTER NUMBER  
0396 7e			            LD      A, (HL)                             ;AND CHECK TO SEE IF IT LARGER  
0397 fe 0d		            CP      0x0D                                ;THAN HIGHEST REG No. (0C): IF LOWER  
0399 38 b6		            JR      C, L0351                            ;THAN OD JUMP TO DISPLAY LOOP ELSE  
039b 18 af		            JR      L034C                               ;JUMP TO SET REGISTER NUMBER TO 1  
039d fe 11		L039D:      CP      11H                                 ;TEST FOR "-"  
039f 20 07		            JR      NZ, L03A8                           ;JUMP IF NOT  
03a1			  
03a1			;"-" HANDLER  
03a1			;ONE IS TAKEN FROM THE CURRENT REGISTER NUMBER AND THEN IT IS CHECKED FOR ZERO. IF IT  
03a1			;BECOMES ZERO, THEN THE CURRENT REGISTER NUMBER IS SET TO THE HIGHEST REGISTER NUMBER (OC)  
03a1			;TO WRAP-AROUND TO DISPLAY THE LAST REGISTER.  
03a1 35			            DEC     (HL)                                ;SUBTRACT 1 FROM REGISTER NUMBER  
03a2 20 ad		            JR      NZ, L0351                           ;JUMP IF NOT 0 TO UP-DATE DISPLAY  
03a4 36 0c		            LD      (HL), 0x0C                          ;ELSE SET TO LAST REGISTER  
03a6 18 a9		            JR      L0351                               ;AND UP-DATE  
03a8			  
03a8			;TEST FOR "GO"  
03a8 fe 12		L03A8:      CP      0x12                                ;TEST FOR "GO" AND JUMP IF NOT  
03aa 20 1a		            JR      NZ, L03C6                           ;TO TEST FOR "AD" OR DATA KEY  
03ac			  
03ac			;"GO" KEY  
03ac			;THE GO KEY CAUSES STEPPING EXECUTION TO CONTINUE.  
03ac			;BEFORE STEPPING IS CONTINUED THOUGH, THE KEYBOARD IS READ AND THE PROGRAM LOOPS UNTIL  
03ac			;ALL KEYS ARE RELEASED. THIS IS TO SEPARATE KEY PRESSES MEANT FOR THE STEPPER AND THOSE  
03ac			;FOR THE ROUTINE BEING STEPPED. ONCE ALL KEYS ARE RELEASED, ALL THE REGISTERS ARE POPPED  
03ac			;OF THE REGISTER DISPLAY STACK, THE STACK IS RESTORED TO ITS "REAL" POSITION AND THE  
03ac			;INTERRUPTS RE-ENABLED. THE RETURN ADDRESS FOR THE ROUTINE BEING STEPPED, STILL THERE ON  
03ac			;THE TOP OF THE REAL STACK, IS USED AS THE RETURN ADDRESS.  
03ac			  
03ac e7			L03AC:      RST     20H                                 ;WAIT UNTIL ALL KEYS ARE RELEASED  
03ad 28 fd		            JR      Z, L03AC                            ;BEFORE RESTARTING  
03af e1			            POP     HL                                  ;RECOVER ALL  
03b0 f1			            POP     AF                                  ;REGISTERS  
03b1 c1			            POP     BC                                  ;IN  
03b2 d1			            POP     DE                                  ;THE  
03b3 e1			            POP     HL                                  ;REVERSE  
03b4 dd e1		            POP     IX                                  ;ORDER  
03b6 fd e1		            POP     IY                                  ;TO  
03b8 08			            EX      AF, AF'                             ;HOW  
03b9 d9			            EXX                                         ;THEY  
03ba f1			            POP     AF                                  ;STORED  
03bb c1			            POP     BC  
03bc d1			            POP     DE  
03bd e1			            POP     HL  
03be 08			            EX      AF, AF'  
03bf d9			            EXX  
03c0 ed 7b 7e 08	            LD      SP, (L087E)                         ;AND STACK POINTER  
03c4 fb			            EI                                          ;RE-ENABLE THE INTERRUPTS  
03c5 c9			            RET                                         ;RET TO STEP NEXT INSTRUCTION  
03c6			  
03c6			;TEST FOR "AD" KEY (RETURN TO JMON)  
03c6 fe 13		L03C6:      CP      0x13                                ;TEST FOR "ADDR" KEY  
03c8 20 01		            JR      NZ, L03CB                           ;JUMP IF NOT TO ASSUME DATA KEY  
03ca c7			            RST     00H                                 ;RETURN TO MONITOR  
03cb			  
03cb			;DATA KEY HANDLER (ENABLE AUTO STEP)  
03cb 3e 20		L03CB:      LD      A, 0x20                             ;SET AND ENABLE AUTO STEP IN THE  
03cd 32 24 08		            LD      (L0824), A                          ;CONTROL/TIMER BYTE (BIT 7 LOW, 20  
03d0 18 a7		            JR      L0379                               ;CYCLES): JUMP TO DISPLAY LOOP  
03d2			;-END OF STEPPER-  
03d2			  
03d2			;START OF MENU  
03d2			;MENU IS SET-UP FOR TAPE ROUTINE HERE  
03d2			;THE VARIABLES ARE MOVED FROM ROM TO RAM AND THE DISPLAY BUFFER IS SET TO 0800.  
03d2			  
03d2 21 7c 07		            LD      HL, 077CH                           ;LOAD HL WITH START OF TAPE  
03d5 11 80 08		            LD      DE, 0880H                           ;VARIABLES: DE IS RAM DE(stination)  
03d8 01 18 00		            LD      BC, 0018H                           ;BC IS THE COUNT  
03db ed b0		            LDIR                                        ;SHIFT VARIABLES  
03dd 21 00 08		L03DD:      LD      HL, 0800H                           ;PUT DISPLAY BUFFER AT 0800  
03e0 22 2c 08		            LD      (L082C), HL  
03e3			  
03e3			;MENU DISPLAY LOOP STARTS HERE  
03e3			;THE MENU ENTRY NUMBER (MEN), HOLDS THE NUMBER OF THE CURRENT MENU ENTRY ON THE DISPLAY.  
03e3			;ALL ACTIONS OF THE MENU DRIVER CENTRE AROUND THIS BYTE.  
03e3			;THE DISPLAY ON THE TEC LED DISPLAY IS GENERATED BY SHIFTING BOTH THE DATA AND ADDRESS  
03e3			;DISPLAY CODES INTO THE RAM DISPLAY BUFFER.  
03e3			;ALL THE POSSIBLE DATA AND ADDRESS DISPLAY CODES ARE STORED IN SEPARATE TABLES IN ROM,  
03e3			;THE BASE OF EACH IS ADDRESSED BY THE CONTENTS OF MEMORY LOCATIONS 0895 (DATA TABLE), AND  
03e3			;0893 (ADDRESS TABLE).  
03e3			;THE FIRST MENU ENTRY IS DENOTED BY A ZERO VALUE IN THE MENU ENTRY NUMBER (MEN). THIS  
03e3			;MEANS THAT THE POSSIBLE ZERO CONDITION MUST BY DETECTED AND THE TABLE ENTRY CALCULATOR  
03e3			;SECTION SKIPPED OVER. WHEN ACCESSING THE DISPLAY TABLES, THE MENU ENTRY NUMBER IS  
03e3			;DECREMENTED UNTIL ZERO AND EACH TIME AN OFFSET EQUAL TO THE LENGTH OF EACH TABLE ENTRY  
03e3			;(4 FOR ADDR AND 2 FOR DATA TABLES) IS ADDED TO THE POINTERS.  
03e3			;AFTER THE REQUIRED ENTRIES ARE FOUND, THEY ARE MOVED INTO THE RAM DISPLAY BUFFER.  
03e3			  
03e3 3a 8f 08		L03E3:      LD      A, (L088F)                          ;GET MENU ENTRY NUMBER (MEN)  
03e6 ed 5b 95 08	L03E6:      LD      DE, (L0895)                         ;DE POINTS TO DATA DISPLAY TABLE  
03ea 2a 93 08		            LD      HL, (L0893)                         ;HL POINTS TO ADDR DISPLAY TABLE  
03ed 01 04 00		L03ED:      LD      BC, 0004H                           ;BC IS BOTH AN INDEX OFFSET AND  
03f0 b7			            OR      A                                   ;BYTE COUNTER (USED BELOW): TEST  
03f1 28 06		            JR      Z, L03F9                            ;A AND SKIP CALCULATOR IF ZERO  
03f3 09			L03F3:      ADD     HL, BC                              ;ADD 4 TO HL TO POINT TO NEXT ADDR  
03f4 13			            INC     DE                                  ;DISPLAY AND 2 TO DE FOR NEXT DATA  
03f5 13			            INC     DE                                  ;DISPLAY  
03f6 3d			            DEC     A                                   ;DO UNTIL A=0  
03f7 20 fa		            JR      NZ, L03F3  
03f9 e5			L03F9:      PUSH    HL                                  ;SAVE ADDR POINTER (not required)  
03fa d5			            PUSH    DE                                  ;AND DATA POINTER  
03fb 11 00 08		            LD      DE, L0800                           ;SHIFT ACROSS ADDR DISPLAY  
03fe ed b0		            LDIR                                        ;TO 0800 (LC-0004 FROM ABOVE)  
0400 e1			            POP     HL                                  ;POP DATA DISPLAY ADDR INTO HL  
0401 0e 02		            LD      C, 0x02                             ;SET PC TO SHIFT DATA DISPLAY BYTES  
0403 ed b0		            LDIR                                        ;SHIFT THE BYTES TO DISPLAY RAM  
0405 e1			            POP     HL                                  ;CLEAN UP STACK  
0406			  
0406			;THIS SECTION CALLS THE SCAN/KEY/LCD/PATCH ROUTINE.  
0406			;WHEN A KEY IS DETECTED A KEY HANDLER ROUTINE IS CALLED. THIS KEY HANDLER IS COMMON TO  
0406			;BOTH THE MENU DRIVER AND THE PERIMETER HANDLER AND IS DOCUMENTED ON FURTHER.  
0406			;IF THE "GO" KEY WAS PRESSED, THE ZERO FLAG WILL BE SET WHEN THE COMMON KEY HANDLER RETURNS  
0406			;AND THE ROUTINE JUMPS TO THE GO HANDLER. IF NOT, THEN A (UNUSED BY JMON) ROUTINE (AT  
0406			;0897) IS CALLED AND FINDS AN IMMEDIATE RETURN.  
0406			;THE RETURN INSTRUCTION WAS PLACED AT 0897 WHEN THE TAPE'S MENU VARIABLES WERE SHIFTED  
0406			;FROM ROM TO RAM (SEE 0793).  
0406			;A JUMP THEN LOOPS BACK TO THE MAIN DISPLAY LOOP TO UP-DATE THE DISPLAYS IN CASE OF A NEW  
0406			;MENU ENTRY NUMBER (MEN) BEING PROVIDED BY THE KEY HANDLER.  
0406			;THE GO HANDLER IS A SIMPLE TABLE ENTRY CALCULATOR THAT USES THE MENU ENTRY NUMBER TO  
0406			;INDEX THROUGH A TABLE OF THREE BYTE JUMPS. LIKE THE DISPLAY CALCULATOR, THE ZERO POSSIBILITY  
0406			;IS TESTED FOR AND THE CALCULATOR SECTION IS SKIPPED OVER IF ZERO. WHEN THE REQUIRED TABLE  
0406			;ENTRY IS POINTED TO BY HL, IT IS THEN JUMPED TO VIA JP (HL), AND THE TABLE ENTRY,,,ITSELF  
0406			;BEING A 3 BYTE JUMP THEN JUMPS TO THE SELECTED MENU ENTRY'S ROUTINE.  
0406			  
0406 cd 42 08		            CALL    L0842                               ;CALL SCAN/KEY/LCD/PATCH ROUTINE  
0409 21 8f 08		            LD      HL, L088F                           ;POINT HL TO MENU ENTRY NUMBER  
040c cd b2 04		            CALL    L04B2                               ;CALL COMMON KEY HANDLER  
040f 28 05		            JR      Z, L0416                            ;JUMP IF KEY WAS "GO" ELSE CALL TO  
0411 cd 97 08		            CALL    L0897                               ;RETURN INSTRUCTION (UNUSED BY JMON)  
0414 18 cd		            JR      L03E3                               ;LOOP TO MAIN DISPLAY LOOP  
0416			  
0416			;MENU "GO" KEYHANDLER  
0416 2a 91 08		L0416:      LD      HL, (L0891)                         ;POINT HL TO BASE OF JUMP TABLE  
0419 3a 8f 08		            LD      A, (L088F)                          ;GET MENU ENTRY NUMBER  
041c b7			            OR      A                                   ;TEST FOR ZERO  
041d 28 06		            JR      Z, L0425                            ;SKIP CALCULATOR IF ZERO  
041f 23			L041F:      INC     HL                                  ;FIND JUMP VECTOR FOR THE CURRENT  
0420 23			            INC     HL                                  ;MENU HEADING  
0421 23			            INC     HL  
0422 3d			            DEC     A  
0423 20 fa		            JR      NZ, L041F  
0425 e9			L0425:      JP      (HL)                                ;AND JUMP TO THE REQUIRED ROUTINE  
0426			  
0426			;PERIMETER HANDLER SET-UP ROUTINES FOR THE TAPE SOFTWARE  
0426			;WHEN GO IS PRESSED IN THE MENU HANDLER, ONE OF THE IMMEDIATE FOLLOWING ROUTINES IS EXECUTED  
0426			;(WHEN THE MENU IS WORKING WITH THE TAPE SOFTWARE). THESE ROUTINES SET-UP THE VARIABLES  
0426			;FOR THE MAIN TAPE FUNCTIONS (SAVE, TEST CS, TEST BL AND LOAD). THE TWO TESTS AND THE LOAD  
0426			;ROUTINE IS BASICALLY THE ONE ROUTINE, EXCEPT THAT EACH HAS ITS OWN PRIVATE SIGN-ON BYTE.  
0426			;LATER YOU WILL SEE THE THE ROUTINE TO LOAD OR TEST IS BASICALLY THE SAME AND THIS "SIGN-ON  
0426			;BYTE" SEPARATES THE DIFFERENT FUNCTIONS AT THE CRITICAL STAGE.  
0426			;THE COMMON SECTION FOR THE LOAD AND TESTS, SETS THE PERIMETER HANDLER TO HAVE TWO WINDOWS,  
0426			;ONE FOR THE FILE NUMBER AND ONE FOR THE OPTIONAL START ADDRESS. IT ALSO SETS THE OPTIONAL  
0426			;START WINDOW TO FFFF (NO OPTIONAL START ADDRESS BY DEFAULT) AND PUTS THE EXECUTING ADDRESS  
0426			;OP THE LOAD/TESTS ROUTINE IN THE PERIMETER "GO" JUMP ADDRESS BUFFER.  
0426			;THE SAVE SET-UP SETS THE NUMBER OF WINDOWS TO 4 AND STORES THE EXECUTING ADDRESS OF THE  
0426			;SAVE PREAMBLE ROUTINE IN THE PERIMETER "GO" JUMP ADDRESS BUFFER (0888).  
0426			;THE 4 TAPE SAVE WINDOWS ARE: THE FILE NUMBER, THE START, THE END AND THE OPTIONAL AUTO  
0426			;GO ADDRESS.  
0426			;ALL THE ABOVE ROUTINES HAVE A COMMON SET-UP AREA. THIS COMMON AREA STORES THE ROUTINE'S  
0426			;JUMP ADDRESS, IN HL, AND THE NUMBER OF WINDOWS, IN A, BOTH PROVIDED FROM THEIR OWN  
0426			;DEDICATED SECTION. THE COMMON AREA ALSO CLEARS THE "ACTIVE WINDOW NUMBER" TO ZERO SO THAT  
0426			;THE PERIMETER HANDLER WILL BE ENTERED WITH THE FIRST WINDOW (FILE NUMBER) SHOWING.  
0426			  
0426			;"LOAD" SET-UP  
0426 af			            XOR     A                                   ;CLEAR A FOR LOAD SIGN-ON BYTE  
0427			  
0427			;COMMON AREA FOR LOAD AND TESTS  
0427 32 8a 08		L0427:      LD      (L088A), A                          ;SAVE SIGN-ON BYTE IN BUFFER  
042a 3e 01		            LD      A, 0x01                             ;LOAD A WITH NUMBER OF WANTED  
042c 21 ff ff		            LD      HL, 0xFFFF                          ;WINDOWS -1 (2 WINDOWS): SET  
042f 22 9a 08		            LD      (L089A), HL                         ;OPTIONAL START WINDOW TO FFFF  
0432 21 31 05		            LD      HL, 0x0531                          ;LOAD HL WITH "GO" ADDR OF LOAD/TEST  
0435 18 0d		            JR      L0444                               ;ROUTINE: JUMP TO STORE HL AND A  
0437			  
0437			;"TEST BLOCK" SET-UP  
0437 3e 02		            LD      A, 0x02                             ;2=TEST BLOCK SIGN-ON BYTE  
0439 18 ec		L0439:      JR      L0427                               ;JUMP TO TEST/LOAD COMMON AREA  
043b			  
043b			;"TEST CHECKSUM" SET-UP  
043b			  
043b 3e 03		            LD      A, 0x03                             ;3=TEST CHECKSUM SIGN-ON BYTE  
043d 18 fa		            JR      L0439                               ;JUMP TO TEST/LOAD COMMON AREA  
043f			  
043f			;SAVE SET-UP  
043f 21 50 04		            LD      HL, 0x0450                          ;POINT HL TO START OF SAVE PRE-AMBLE  
0442 3e 03		            LD      A, 0x03                             ;SET UP FOR 4 WINDOWS  
0444			  
0444			;COMMON AREA FOR ALL SET-UPS  
0444 22 88 08		L0444:      LD      (L0888), HL                         ;STORE HL AND A  
0447 32 87 08		            LD      (L0887), A  
044a af			            XOR     A                                   ;SET MEN TO FIRST WINDOW (FILE NUMBER)  
044b 32 86 08		            LD      (L0886), A  
044e 18 23		            JR      L0473                               ;JUMP TO PERIMETER HANDLER  
0450			  
0450			;SAVE ROUTINE PRE-AMBLE  
0450			;THE SAVE PREAMBLE FITS IN BETWEEN THE PERIMETER HANDLER AND THE ACTUAL SAVE ROUTINE. THE  
0450			;PURPOSE OF IT IS TO SHIFT ACROSS THE FILE NUMBER, THE START ADDRESS AND THE OPTIONAL GO  
0450			;ADDRESS. IT ALSO CALCULATES THE LENGTH OF THE BLOCK AND TRANSFERS IT ACROSS TO THE TAPE  
0450			;FILE INFORMATION BLOCK WHICH IS OUTPUTTED TO THE TAPE.  
0450			;IF THE END IS LOWER THAN THE START THE ROUTINE WILL JUMP TO DISPLAY "Err -In".  
0450			  
0450 2a 9e 08		            LD      HL, (L089E)                         ;SHIFT OPTIONAL GO TO OUTPUT BUFFER  
0453 22 aa 08		            LD      (L08AA), HL  
0456 2a 9a 08		            LD      HL, (L089A)                         ;SHIFT START ADDRESS OF BLOCK  
0459 22 a6 08		            LD      (L08A6), HL                         ;TO TAPE FILE OUTPUT BUFFER  
045c eb			            EX      DE, HL                              ;PUT START OF BLOCK IN DE  
045d 2a 9c 08		            LD      HL, (L089C)                         ;GET END OF BLOCK IN HL  
0460 b7			            OR      A                                   ;CLEAR CARRY  
0461 ed 52		            SBC     HL, DE                              ;CALCULATE NUMBER OF BYTES IN  
0463 23			            INC     HL                                  ;BLOCK (DIFFERENCE +1)  
0464 da 4a 00		            JP      C, L004A                            ;JUMP IF CARRY TO "Err-In"  
0467 22 a8 08		            LD      (L08A8), HL                         ;STORE COUNT IN FILE INFO OUTPUT  
046a 2a 98 08		            LD      HL, (L0898)                         ;SHIFT FILE NUMBER TO  
046d 22 a4 08		            LD      (L08A4), HL                         ;TAPE FILE INFO OUTPUT BUFFER  
0470 c3 f0 04		            JP      L04F0                               ;JUMP TO SAVE OUTPUT ROUTINE  
0473			  
0473			;FINAL TAPE SET-UP BEFORE THE PERIMETER HANDLER. THIS PLACES FFFF IN THE OPTIONAL GO WINDOW  
0473			;BEFORE ENTERING THE PERIMETER HANDLER.  
0473			  
0473 21 ff ff		L0473:      LD      HL, 0xFFFF                          ;PUT FFFF IN OPTIONAL GO WINDOW  
0476 22 9e 08		            LD      (L089E), HL                         ;  
0479			  
0479			;PERIMETER HANDLER  
0479			;THE PERIMETER HANDLER ROUTINE IS SIMILAR TO THE MENU DRIVER. THE MAJOR DIFFERENCES ARELISTED BELOW:  
0479			;THE PERIMETER HANDLER CREATES ITS OWN ADDRESS DISPLAY CODES BY CONVERTING THE CONTENTS  
0479			;OF THE ACTIVE WINDOW TO DISPLAY CODE AND THEREFORE DOES NOT REQUIRE A TABLE OF ADDRESS DISPLAY CODES.  
0479			;ANOTHER DIFFERENCE IS THE ADDRESS OF THE ROUTINE TO BE EXECUTED ON A "GO" PRESS IS SUPPLIED  
0479			;BY THE CALLING ROUTINE. THEREFORE THE PERIMETER HANDLER DOESN'T REQUIRE A JUMP TABLE AND  
0479			;ASSOCIATED CALCULATER.  
0479			;THE ONLY OTHER MAJOR DIFFERENCE IS THAT THE PERIMETER HANDLER HAS ITS OWN BUILT IN DATA  
0479			;KEY HANDLER WHILE THE MENU DOES NOT.  
0479			;THE FRONT SECTION BELOW CALCULATES THE ADDRESS OF THE ACTIVE WINDOW AND THE ADDRESS OF  
0479			;THE DATA DISPLAY FROM THE DISPLAY TABLE.  
0479			;THE MENU ENTRY NUMBER FROM THE MENU DRIVER HAS AN EQUIVALENT HERE. IT IS THE ACTIVE WINDOW  
0479			;NUMBER AND IS USEDIN IDENTICAL FASHION.  
0479			  
0479			ORG     $0479  
0479 3a 86 08		L0479:      LD      A, (L0886)                          ;GET NUMBER OF ACTIVE WINDOW  
047c 2a 84 08		            LD      HL, (L0884)                         ;GET ADDRESS OF FIRST (FILE) WINDOW+1  
047f ed 5b 82 08	            LD      DE, (L0882)                         ;GET BASE OF DATA DISPLAY TABLE  
0483 b7			            OR      A                                   ;TEST ACTIVE WINDOW NUMBER FOR ZERO  
0484 28 07		            JR      Z, L048D                            ;SKIP CALCULATOR IF ZERO  
0486 13			L0486:      INC     DE                                  ;FINE CURRENT DATA DISPLAY  
0487 13			            INC     DE                                  ;AND WINDOW  
0488 23			            INC     HL  
0489 23			            INC     HL  
048a 3d			            DEC     A  
048b 20 f9		            JR      NZ, L0486  
048d			  
048d			;AFTER THE ADDRESS+1 OF THE ACTIVE WINDOW IS CALCULATED, IT IS STORED IN A BUFFER (AT  
048d			;088C). EACH TIME A DATA KEY 1S PRESSED, HL IS LOADED FROM THIS BUFFER AND THEREFORE POINTS  
048d			;TO THE ACTIVE WINDOW. THE DATA CAN THEN BE SHIFTED INTO THE ACTIVE WINDOW IMMEDIATELY.  
048d			  
048d 22 8c 08		L048D:      LD      (L088C), HL                         ;STORE ACTIVE WINDOW ADDRESS+l  
0490			  
0490			;BELOW THE DATA DISPLAY BYTES ARE PUT INTO THE DATA SECTION OF THE DISPLAY BUFFER VIA HL.  
0490 eb			            EX      DE, HL                              ;PUT DATA DISPLAY ADDRESS IN HL  
0491 7e			            LD      A, (HL)                             ;GET RIGHT-HAND DISPLAY BYTE IN A  
0492 23			            INC     HL                                  ;AND LEFT-HAND IN H  
0493 66			            LD      H, (HL)                             ;PUT RIGHT-HAND BYTE IN L  
0494 6f			            LD      L, A                                ;HL HOLDS THE DATA DISPLAY BYTES  
0495 22 04 08		            LD      (L0804), HL                         ;STORE DATA DISPLAY IN BUFFER  
0498			  
0498			;BELOW THE 16 BIT CONTENTS OF THE ACTIVE WINDOW ARE CONVERTED TO DISPLAY CODE ARE PLACED  
0498			;IN THE ADDRESS SECTION OF THE DISPLAY BUFFER.  
0498			  
0498 eb			            EX      DE, HL                              ;GET ACTIVE WINDOW ADDRESS FROM DE  
0499 7e			            LD      A, (HL)                             ;AND TRANSFER  
049a 2b			            DEC     HL                                  ;THE 16 BIT CONTENTS OF THE ACTIVE  
049b 6e			            LD      L, (HL)                             ;WINDOW INTO HL  
049c 67			            LD      H, A                                ;READY TO COVERT TO DISPLAY CODE  
049d 01 00 08		            LD      BC, L0800                           ;BC=DISPLAY BUFFER START  
04a0 cd 30 08		            CALL    L0830                               ;CALL CONVERSION HL TO DISPLAY CODE  
04a3			  
04a3			;THE DISPLAY BUFFER IS NOW SET-UP AND THE SCAN/KEY LOOP IS CALLED. WHEN A KEY IS PRESSED,  
04a3			;A COMMON KEY HANDLER IS CALLED.  
04a3			;THE COMMON KEY HANDLER DOES ALL THE REQUIRED PROCESSING FOR THE "+", "- " AND "AD" KEYS.  
04a3			;IF EITHER THE "GO" OR A DATA KEY IS PRESSED, THEN THE HANDLER RETURNS WITH THE FLAGS SET  
04a3			;TO SIGNIFY THESE KEYS.  
04a3			;IF "GO" IS PRESSED THEN THE ZERO FLAG IS SET AND THE "GO" HANDLER BELOW IS EXECUTED. IF  
04a3			;A DATA KEY IS PRESSED THEN THE ZERO FLAG IS CLEAR (NOT ZERO) AND CARRY FLAG IS CLEAR THE  
04a3			;DATA KEY HANDLER IS EXECUTED IF THESE CONDITIONS ARE MET.  
04a3			  
04a3 cd 42 08		L04A3:      CALL    L0842                               ;CALL SCAN/KEY/LCD/PATCH ROUTINE  
04a6 21 86 08		            LD      HL, L0886                           ;POINT HL TO ACTIVE WINDOW NUMBER  
04a9 cd b2 04		            CALL    L04B2                               ;CALL COMMON KEY HANDLER  
04ac 20 16		            JR      NZ, L04C4                           ;JUMP IF NOT GO KEY TO TEST FOR DATA  
04ae 2a 88 08		            LD      HL, (L0888)                         ;OR CONTROL KEY: ELSE GET JUMP ADDRESS  
04b1 e9			            JP      (HL)                                ;STORED BY SET-UP AND GO  
04b2			  
04b2			;COMMON KEY HANDLER  
04b2			;BECAUSE THE PERIMETER HANDLER AND THE MENU DRIVER ARE VERY SIMILAR, THEY ARE ABLE TO  
04b2			;SHARE A COMMON KEY HANDLER.  
04b2			;THE ACTION OF THE KEY HANDLER IS AS FOLLOWS:  
04b2			;IF THE "AD" KEY IS PRESSED, THEN THE RETURN ADDRESS IS POPPED OFF THE STACK AND A RETURN  
04b2			;IS DONE TO THE CALLING ROUTINE (USUALLY JMON). IF THE "GO" KEY IS PRESSED, THEN THE ZERO  
04b2			;FLAG WILL BE SET AND A RETURN DONE. IT IS THEN UP TO THE CALLING ROUTINE TO SERVICE THE  
04b2			;"GO" KEY.  
04b2			;A DATA KEY WILL BE FLAGGED BY SETTING THE CARRY FLAG AND CLEARING THE ZERO FLAG. LIKE  
04b2			;THE "GO" KEY, THE CALLING ROUTINE MUST DECIDE WHAT IT IS TO DO WITH THE DATA KEY (THERE  
04b2			;IS A BUILT IN DATA KEY HANDLER FOR THE PERIMETER HANDLER).  
04b2			;IF EITHER THE "+" OR "-" KEYS ARE PRESSED THEN A SPECIAL ROUTINE IS CALLED. THIS ROUTINE  
04b2			;WILL ALTER THE CURRENT NUMBER OF THE ACTIVE WINDOW OR MENU ENTRY. THE RESULT IS THAT WHEN  
04b2			;THE DISPLAY IS UP-DATED, THE DISPLAYS WILL BE SHIFTED TO EITHER THE NEXT DISPLAY FOR "+"  
04b2			;OR TO THE PREVIOUS ONE FOR "- " AND WRAP-AROUND IF REQUIRED.  
04b2			  
04b2 fe 10		L04B2:      CP      0x10                                ;IS THE KEY  
04b4 28 1b		            JR      Z, L04D1                            ;JUMP IF SO TO "+" HANDLER  
04b6 fe 11		            CP      0x11                                ;IS IT "-"  
04b8 28 17		            JR      Z, L04D1                            ;JUMP IF SO TO "-" HANDLER  
04ba fe 13		            CP      0x13                                ;IS IT "AD"  
04bc 20 02		            JR      NZ, L04C0                           ;JUMP IF NOT TO TEST FOR "GO"  
04be e1			            POP     HL                                  ;CLEAN UP STACK  
04bf c9			            RET                                         ;RETURN TO JMON (OR CALLING ROUTINE)  
04c0 fe 12		L04C0:      CP      0x12                                ;IS IT "GO"  
04c2 3f			            CCF                                         ;CLEAR CARRY IF NOT IF GO C=1 Z=1  
04c3 c9			            RET                                         ;IF DATA SET Z=0 C=0: RETURN  
04c4			  
04c4			;BELOW IS THE PERIMETER HANDLER DATA KEY HANDLER/DISCRIMINATOR  
04c4			;IF THE KEY WAS "+" OR "-" THEN IT HAS ALREADY BEEN HANDLED AND THIS CONDITION IS FLAGGED  
04c4			;BY THE CARRY BEING SET. IN THIS CASE, A JUMP IS DONE BACK TO THE MAIN BODY TO UP-DATE  
04c4			;THE DISPLAY OTHERWISE THE DATA KEY VALUE IS SHIFTED INTO THE ACTIVE WINDOW.  
04c4			  
04c4 38 b3		L04C4:      JR      C, L0479                            ;JUMP IF KEY WAS "+" OR "-”  
04c6 2a 8c 08		            LD      HL, (L088C)                         ;POINT HL TO ACTIVE WINDOW+1  
04c9 2b			            DEC     HL                                  ;POINT TO LOW ORDER BYTE  
04ca ed 6f		            RLD                                         ;SHIFT IN DATA KEY VALUE  
04cc 23			            INC     HL                                  ;AND SHIFT OTHER NIBBLES  
04cd ed 6f		            RLD                                         ;ACROSS  
04cf 18 a8		            JR      L0479                               ;JUMP BACK TO UP-DATE DISPLAY  
04d1			  
04d1			;THIS ROUTINE IS CALLED FROM THE COMMON KEY HANDLER IF EITHER "+" OR "-" HAVE BEEN PUSHED.  
04d1			;THIS ROUTINE WILL EITHER INCREMENT OR DECREMENT THE MEMORY LOCATION ADDRESSED BY HL FOR  
04d1			;THE "+" AND "-" KEY RESPECTIVELY. HL WAS LOADED BY THE CALLING ROUTINE TO POINT TO ITS  
04d1			;MAIN CONTROLLING BYTE. THIS IS EITHER THE CURRENT MENU ENTRY NUMBER (MENU DRIVER), OR  
04d1			;THE ACTIVE WINDOW NUMBER (PERIMETER HANDLER) , BOTH OF WHICH HAVE BEEN DESCRIBED PREVIOUSLY.  
04d1			;AFTER INCREMENTING OR DECREMENTING (HL), THIS ROUTINE THEN CHECKS THAT THE VALUE IN (HL)  
04d1			;IS NOT GREATER THAT THE BYTE AT HL+1 (WHICH IS THE MAXIMUM NUMBER OF DISPLAYS LESS 1).  
04d1			;KEEP IN MIND, IF IT UNDERFLOWED FROM ZERO IT WILL BECOME FF AND BE HIGHER THAN (HL). THIS  
04d1			;SECOND BYTE (AT HL+1) IS THE NUMBER OF ALLOWABLE DISPLAYS-1 AND WAS PROVIDED BY THE ROM  
04d1			;TABLE FOR THE (TAPE) MENU DRIVER, AND PROVIDED BY THE PERIMETER HANDLER SET-UP ROUTINES  
04d1			;(REFER TO 042A AND 0442).  
04d1			;IF THE FIRST BYTE BECOMES HIGHER THAN THE SECOND., THEN THE ROUTINE CHECKS TO SEE WHICH  
04d1			;KEY WAS PRESSED. IF THE "+" KEY WAS, THEN (HL) IS CLEARED. THIS WILL CAUSE MENU OR  
04d1			;PERIMETER HANDLER TO SHOW ITS FIRST DISPLAY WHEN RE-ENTERED.  
04d1			;IF THE KEY WAS "-", THEN THE MAXIMUM NUMBER OF DISPLAYS-1 (WHICH IS THE SAME AS THE NUMBER  
04d1			;OF THE FINAL DISPLAY) IS TRANSFERRED INTO (HL) (THE NUMBER OF THE CURRENT DISPLAY). THIS  
04d1			;WILL CAUSE THE LAST DISPLAY TO BE SHOWN WHEN THE MENU DRIVER OR PERIMETER HANDLER IS  
04d1			;RE-ENTERED.  
04d1			;IF THERE IS NO UNDERFLOW OR OVERFLOW THEN THE ROUTINE RETURNS JUST AFTER IT HAS EITHER  
04d1			;INCREMENTED OR DECREMENTED THE CURRENT NUMBER OF THE MENU ENTRY NUMBER OR ACTIVE WINDOW  
04d1			;NUMBER.  
04d1			;WHEN THE MENU DRIVER OR PERIMETER HANDLER ARE RE-ENTERED, THEY WILL SHOW THE NEXT DISPLAY  
04d1			;FOR "+" OR THE PREVIOUS FOR "-" AND WRAP-AROUND AUTOMATICALLY IF REQUIRED.  
04d1			  
04d1			ORG     $04D1  
04d1 4f			L04D1:      LD      C, A                                ;SAVE INPUT KEY VALUE IN C  
04d2 23			            INC     HL                                  ;PUT MAX NUMBER OF DISPLAYS-1  
04d3 46			            LD      B, (HL)                             ;IN B  
04d4 2b			            DEC     HL                                  ;RESET HL TO POINT TO CURRENT NUMBER  
04d5 0f			            RRCA                                        ;WAS KEY "+" OR "-"? BIT 0 WILL TELL  
04d6 7e			            LD      A, (HL)                             ;PUT CURRENT NUMBER IN A  
04d7 38 02		            JR      C, L04DB                            ;JUMP IF KEY WAS "-"  
04d9 3c			            INC     A                                   ;INCREASE A BY 2  
04da 3c			            INC     A                                   ;  
04db 3d			L04DB:      DEC     A                                   ;DECREASE A BY ONE  
04dc 04			            INC     B                                   ;ADD 1 TO MAX NUMBER-1: IS CURRENT  
04dd b8			            CP      B                                   ;NUMBER EQUAL OR GREATER THAN MAX?  
04de 30 05		            JR      NC, L04E5                           ;JUMP IF SO TO UNDER/OVERFLOW HANDLER  
04e0 77			L04E0:      LD      (HL), A                             ;ELSE STORE UPDATED CURRENT NUMBER  
04e1 af			            XOR     A                                   ;SET ZERO FLAG  
04e2 3d			            DEC     A                                   ;CHANGE ZERO FLAG TO 0  
04e3 37			            SCF                                         ;AND SET CARRY  
04e4 c9			            RET                                         ;DONE  
04e5 cb 41		L04E5:      BIT     0, C                                ;TEST FOR "+" OR "-"  
04e7 20 03		            JR      NZ, L04EC                           ;JUMP IF "-" TO SET CURRENT NUMBER  
04e9 af			            XOR     A                                   ;TO LAST DISPLAY: ELSE SET FIRST  
04ea 18 f4		            JR      L04E0                               ;DISPLAY: JUMP TO STORE NEW NUMBER  
04ec 05			L04EC:      DEC     B                                   ;CORRECT MAX NUMBER-1  
04ed 78			            LD      A, B                                ;SET A TO LAST DISPLAY NUMBER  
04ee 18 f0		            JR      L04E0                               ;JUMP TO STORE LAST DISPLAY NUMBER  
04f0			  
04f0			;THIS IS THE TAPE OUTPUT ROUTINE  
04f0			;THE ACTION IS AS FOLLOWS:  
04f0			;A LEADER OF LOW FREQUENCY TONE IS OUTPUTTED FOLLOWED BY THE FILE INFORMATION BLOCK.  
04f0			;AFTER THE FILE INFORMATION BLOCK IS OUTPUTTED, SEVERAL SECONDS OF HIGH FREQUENCY MIDDLE  
04f0			;SYNC IS OUTPUTTED, THE TIME IT TAKES TO OUTPUT THE MIDDLE SYNC IS USED BY THE TAPE INPUT  
04f0			;ROUTINE TO DISPLAY THE FILE NUMBER.  
04f0			;THE DATA TO BE SAVED ON TAPE IS BROKEN UP INTO BLOCKS OF 256 BYTES AND OUTPUTTED WITH A  
04f0			;CHECKSUM AT THE END OF EACH BLOCK. A COUNTER IS SHOWN ON THE TEC LED DISPLAY THAT SHOWS  
04f0			;HOW MANY COMPLETE BLOCKS LEFT (UP TO 16 BLOCKS).  
04f0			;IF THERE IS AN ODD SIZE BLOCK, IT IS OUTPUTTED AS THE LAST BLOCK.  
04f0			;AFTER ALL THE BLOCKS HAVE BEEN OUTPUTTED, AN END OF FILE HIGH FREQUENCY TONE IS OUTPUTTED.  
04f0			  
04f0 21 00 30		L04F0:      LD      HL, 0x3000                          ;HL HAS NUMBER OF LEADER CYCLES  
04f3 cd 80 06		            CALL    L0680                               ;CALL LOW TONE  
04f6 21 a4 08		            LD      HL, 0x08A4                          ;HL IS START OF FILE INFORMATION BLOCK  
04f9 06 0c		            LD      B, 0x0C                             ;LOAD B WITH NUMBER OF BYTES TO BE  
04fb af			            XOR     A                                   ;OUTPUTTED: ZERO A FOR CHECKSUM  
04fc cd 4b 06		            CALL    L064B                               ;CALL OUT BLOCK  
04ff 21 00 50		            LD      HL, 0x5000                          ;LD HL WITH MID SYNC CYCLE COUNT  
0502 cd 84 06		            CALL    L0684                               ;CALL HIGH TONE  
0505 2a a6 08		            LD      HL, (L08A6)                         ;LOAD HL, WITH START OF OUTPUT BLOCK  
0508			  
0508			;OUTPUT LOOP STARTS HERE  
0508			;THE DISCUSSION BELOW ON THE BYTE COUNTER AND BLOCK FORMATION APPLIES TO THE TAPE INPUT  
0508			;LOOP ALSO. THE TAPE INPUT LOOP DESCRIPTION WILL REFER YOU BACK TO THESE NOTES.  
0508			;THE BYTE COUNT IS PUT INTO BC AND THEN A ROUTINE TO CONVERT B (THE TOTAL NUMBER OF FULL  
0508			;BLOCKS TO BE OUTPUTTED) TO DISPLAY FORMAT AND OUTPUT IT IS CALLED.  
0508			;THE CONVERSION ROUTINE ALSO TESTS B FOR ZERO. IF B IS NOT ZERO, THE ROUTINE RETURNS WITH  
0508			;THE ZERO FLAG CLEAR (NOT ZERO) AND THE HIGH ORDER BYTE OF THE BYTE COUNT IN B IS DECREMENTED  
0508			;BY ONE AND STORED IN ITS BUFFER. THIS COUNTS DOWN THE BLOCKS. B IS THEN ZEROED SO THAT  
0508			;A FULL BLOCK (256 BYTES) WILL BE OUTPUTTED ON RETURNING.  
0508			;IF THE HIGH ORDER BYTE OF THE BYTE COUNT (IN B) IS ZERO (NO FULL BLOCK OF 256 BYTES) THEN  
0508			;C (THE LOW ORDER BYTE OF THE COUNT) IS TRANSFERRED INTO B AND THE ZERO FLAG IS SET.  
0508			;THE CONVERSION THEN RETURNS WITH THE NUMBER (IF ANY) OF REMAINING BYTES IN B.  
0508			;AFTER THE CONVERSION ROUTINE HAS RETURNED, A JUMP IS DONE IF THE ZERO FLAG IS CLEAR  
0508			;(DENOTING A NOT ZERO STATE). THIS JUMP SKIPS AHEAD TO SAVE THE FLAGS AND OUTPUT ONE FULL  
0508			;BLOCK  
0508			;IF THE ZERO FLAG IS SET, THEN THE ROUTINE BELOW CHECKS TO SEE IF THE LOW ORDER BYTE (FROM  
0508			;C) THAT HAS BEEN PLACED IN B, IS ZERO. IF THE LOW ORDER BYTE IS ZERO, THEN ALL THE BYTES  
0508			;HAVE BEEN OUTPUTTED. THE ROUTINE THEN JUMPS TO DISPLAY " -END -S".  
0508			;IF THE LOW ORDER BYTE OF THE COUNT IS NOT ZERO THEN THE ZERO FLAG IS SET AND SAVED ON  
0508			;THE STACK BEFORE WHAT ARE NOW KNOWN TO BE THE LAST IS OUTPUTTED.  
0508			;BEFORE THE DATA IS SENT TO THE TAPE, A SHORT HIGH TONE SYNC IS OUTPUTTED TO COVER THE  
0508			;SOFTWARE OVERHEAD OF THE TAPE INPUT ROUTINE, AND A IS ZEROED TO BE USED AS THE CHECK-SUM.  
0508			  
0508 ed 4b a8 08	L0508:      LD      BC, (L08A8)                         ;LOAD BC WITH NUMBER OF BYTES  
050c cd c9 05		            CALL    L05C9                               ;CALL ROUTINE TO DISPLAY BLOCK COUNT  
050f 20 05		            JR      NZ, L0516                           ;AND TEST LENGTH: JUMP IF FULL BLOCK  
0511 78			            LD      A, B                                ;TO OUTPUT: TEST LOW BYTE OF COUNT  
0512 b7			            OR      A                                   ;IN B IS ZERO AND JUMP TO DISPLAY  
0513 28 11		            JR      Z, L0526                            ;"-END-S" IF SO  
0515			  
0515			;THE XOR A INSTRUCTION BELOW SETS THE ZERO FLAG TO SIGNIFY THAT THE BLOCK ABOUT TO BE  
0515			;OUTPUTTED IS THE FINAL BLOCK. THE ROUTINE WILL THEN DISPLAY "-END-S" (AFTER A SHORT END  
0515			;SYNC TONE).  
0515			  
0515 af			            XOR     A                                   ;SET ZERO FLAG  
0516 f5			L0516:      PUSH    AF                                  ;AND SAVE ON STACK  
0517			  
0517			;AT THIS POINT IF THE ZERO FLAG ON THE STACK IS CLEAR (NOT ZERO STATE), THEN AFTER THE  
0517			;CURRENT BLOCK IS OUTPUTTED, THE ROUTINE WILL LOOP BACK TO START OF THE OUTPUT LOOP TO  
0517			;SEE IF THERE IS ANY MORE BYTES TO BE OUTPUTTED.  
0517 d9			            EXX                                         ;SWAP REGISTERS  
0518 21 14 02		            LD      HL, 0x0214                          ;LOAD HL FOR SHORT BURST OF  
051b cd 84 06		            CALL    L0684                               ;HIGH TONE  
051e d9			            EXX                                         ;SWAP BACK REGISTERS  
051f af			            XOR     A                                   ;ZERO A FOR CHECKSUM  
0520 cd 4b 06		            CALL    L064B                               ;CALL OUTBLOCK  
0523 f1			            POP     AF                                  ;RECOVER FLAGS AND JUMP IF  
0524 20 e2		            JR      NZ, L0508                           ;THERE MIGHT BE MORE TO OUTPUT  
0526			  
0526			;ALL BLOCKS HAVE BEEN OUTPUTTED SO FINISH WITH A SHORT END TONE AND SET-UP END DISPLAY "-END-S".  
0526 21 00 10		L0526:      LD      HL, 0x1000                          ;LOAD HL WITH SHORT END TONE  
0529 cd 84 06		            CALL    L0684                               ;CALL HIGH TONE  
052c 3e 05		            LD      A, 0x05                             ;LD A TO INDEX "END-S DISPLAY  
052e c3 e6 03		            JP      L03E6                               ;JUMP BACK TO MENU  
0531			  
0531			;THIS IS THE START OF THE TAPE INPUT SECTION.  
0531			;THE ACTION HERE IS TO DETECT A VALID LEADER BY COUNTING 1000H CYCLES OF LOW FREQUENCY  
0531			;TONE. AFTER THIS HAS BEEN DETECTED, THE ROUTINE WAITS UNTIL IT DETECTS THE START BIT OF  
0531			;THE FILE INFORMATION BLOCK. THE BLOCK IS THEN LOADED IN AND A CHECK-SUM COMPARE IS DONE.  
0531			;IF AN ERROR IS DETECTED, THE ROUTINE JUMPS TO DISPLAY "FAIL -XX", OTHERWISE THE FILE  
0531			;NUMBER IS CONVERTED TO DISPLAY FORMAT AND DISPLAYED FOR A FEW SECONDS.  
0531			  
0531 01 00 10		L0531:      LD      BC, 0x1000                          ;LOAD BC TO COUNT 0x1000 CYCLES  
0534 cd 30 06		L0534:      CALL    L0630                               ;CALL PERIOD  
0537 38 f8		            JR      C, L0531                            ;LOOP UNTIL LOW TONE IS DETECTED  
0539 0b			            DEC     BC                                  ;COUNT LONG  
053a 78			            LD      A, B                                ;PERIODS  
053b b1			            OR      C                                   ;IF BC REACHES ZERO THEN IT IS  
053c 20 f6		            JR      NZ, L0534                           ;ACCEPTED THAT A VALID FILE FOLLOWS  
053e 06 0c		            LD      B, 0x0C                             ;LOAD B TO INPUT 12 BYTES AND  
0540 21 a4 08		            LD      HL, 0x08A4                          ;POINT HL TO FILE INFO BLOCK INPUT  
0543 cd 30 06		L0543:      CALL    L0630                               ;BUFFER: CALL PERIOD  
0546 30 fb		            JR      NC, L0543                           ;AND WAIT FOR LOW TONE TO END  
0548 cd e7 05		            CALL    L05E7                               ;CALL INBLOCK TO GET FILE INFO BLOCK  
054b 20 54		            JR      NZ, L05A1                           ;JUMP NOT ZERO TO FAIL LOAD ROUTINE  
054d 01 00 08		            LD      BC, 0x0800                          ;LOAD BC TO POINT TO DISPLAY BUFFER  
0550 2a a4 08		            LD      HL, (L08A4)                         ;PUT FILE NUMBER INTO EL  
0553 cd 30 08		            CALL    L0830                               ;CONVERT HL TO DISPLAY CODE  
0556 3e 47		            LD      A, 0x47                             ;PUT "F" IN DISPLAY BUFFER  
0558 32 05 08		            LD      (L0805), A                          ;FOR "FILE"  
055b 01 f2 01		            LD      BC, 0x01F2                          ;LD BC WITH THE DISPLAY ON TIME  
055e c5			L055E:      PUSH    BC                                  ;SAVE ON STACK  
055f cd 36 08		            CALL    L0836                               ;CALL SCAN  
0562 c1			            POP     BC                                  ;RECOVER BC  
0563 0b			            DEC     BC                                  ;DECREMENT  
0564 78			            LD      A, B                                ;AND LOOP UNTIL  
0565 b1			            OR      C                                   ;BC IS ZERO  
0566 20 f6		            JR      NZ, L055E  
0568			  
0568			;AFTER A FILE INFORMATION BLOCK IS LOADED AND THE FILE NUMBER DISPLAYED, A TEST IS DONE  
0568			;ON THE REQUIRED FILE NUMBER WINDOW. FIRST IT IS TESTED FOR FFFF (LOAD/TEST NEXT FOUND  
0568			;FILE). IF FFFF, THE ROUTINE SKIPS AHEAD TO LOAD/TEST THE FILE. OTHERWISE THE REQUIRED  
0568			;FILE NUMBER IS SUBTRACTED FROM THE JUST LOADED FILE NUMBER, IF THE RESULT IS ZERO THEN  
0568			;THE FILE IS THE ONE SELECTED AND IS LOADED/TESTED.  
0568			;THE OPTIONAL START WINDOW IS THEN TESTED FOR FFFF. IF IT IS, THE START ADDRESS FROM THE  
0568			;TAPE IS USED. IF THE OPTIONAL START BUFFER HAS SOMETHING OTHER THAT FFFF, THEN THE ADDRESS  
0568			;HERE IS USED AS THE START ADDRESS TO LOAD/TEST THE TAPE.  
0568			  
0568 2a 98 08		            LD      HL, (L0898)                         ;TEST FOR FFFF IN FILE NAME WINDOW  
056b 23			            INC     HL  
056c 7c			            LD      A, H  
056d b5			            OR      L  
056e 2b			            DEC     HL                                  ;JUMP IF FILE WINDOW IS FFFF  
056f 28 09		            JR      Z, L057A                            ;TO INPUT FILE REGARDLESS OF ITS NUMBER  
0571 ed 5b a4 08	            LD      DE, (L08A4)                         ;ELSE TEST THAT INPUT FILE NAME  
0575 b7			            OR      A                                   ;IS THE SAME AS THE ONE IN THE FILE  
0576 ed 52		            SBC     HL, DE                              ;NUMBER WINDOW AND JUMP IF NOT  
0578 20 b7		            JR      NZ, L0531                           ;SELECTED FILE TO LOOK FOR NEXT FILE  
057a 2a 9a 08		L057A:      LD      HL, (L089A)                         ;TEST THAT OPTIONAL START ADDRESS  
057d 23			            INC     HL                                  ;IS FFFF  
057e 7c			            LD      A, H  
057f b5			            OR      L  
0580 2b			            DEC     HL  
0581 20 03		            JR      NZ, L0586                           ;JUMP IF NOT, ELSE USE START ADDRESS  
0583 2a a6 08		            LD      HL, (L08A6)                         ;PROVIDED FROM THE TAPE  
0586			  
0586			;THE MAIN LOAD/TEST ROUTINE STARTS HERE.  
0586			;REFER TO THE DESCRIPTION OF THE BYTE COUNT AND BLOCK FORMATION AT THE OUTPUT SECTION  
0586			;ROUTINE (SEE 508).  
0586			;WHEN ALL THE BLOCKS HAVE BEEN INPUTTED AND THE ROUTINE JUMPS TO DISPLAY PASS/FAIL -Ld ON  
0586			;THE LED DISPLAY.  
0586			;HL IS POINTING TO THE PLACE IN MEMORY WHERE THE FILE WILL BE LOADED/TESTED.  
0586			  
0586 ed 4b a8 08	L0586:      LD      BC, (L08A8)                         ;PUT NUMBER OF BYTES INTO BC  
058a cd c9 05		            CALL    L05C9                               ;CALL B CONVERT AND TEST  
058d 20 05		            JR      NZ, L0594                           ;JUMP IF NOT ZERO AS THERE IS AT  
058f 78			            LD      A, B                                ;LEAST ONE FULL BLOCK TO LOAD/TEST  
0590 b7			            OR      A                                   ;CHECK THAT B (FORMALLY C)=0  
0591 28 0a		            JR      Z, L059D                            ;JUMP IF SO AS ALL BYTES DONE  
0593 af			            XOR     A                                   ;ELSE SET ZERO FLAG TO REMEMBER  
0594 f5			L0594:      PUSH    AF                                  ;SAVE FLAGS ON STACK  
0595 cd e3 05		            CALL    L05E3                               ;CALL INBLOCK  
0598 20 06		            JR      NZ, L05A0                           ;JUMP IF LOAD/TEST FAILED  
059a f1			            POP     AF                                  ;RECOVER FLAGS  
059b 20 e9		            JR      NZ, L0586                           ;LOOP IF THERE MIGHT BE MORE  
059d af			L059D:      XOR     A                                   ;SET ZERO (SUCCESS) FLAG  
059e 18 01		            JR      L05A1                               ;JUMP TO END HANDLER  
05a0 d1			L05A0:      POP     DE                                  ;CLEAN UP STACK  
05a1 20 10		L05A1:      JR      NZ, L05B3                           ;JUMP IF FAILED LOAD/TEST  
05a3			  
05a3			;THE LOAD/TEST HAS PASSED. TEST HERE FOR OPTIONAL AUTO-GO AND FOR LOAD OPERATION (NO  
05a3			;AUTO-GO FOR TEST OPERATIONS). START EXECUTION AT AUTO-GO ADDRESS IF REQUIRED.  
05a3			  
05a3 2a aa 08		            LD      HL, (L08AA)                         ;PUT OPTIONAL GO ADDRESS IN HL  
05a6 23			            INC     HL                                  ;TEST FOR FFFF  
05a7 7c			            LD      A, H                                ;AND JUMP  
05a8 b5			            OR      L                                   ;IF FFFF  
05a9 2b			            DEC     HL                                  ;AS THERE  
05aa 28 07		            JR      Z, L05B3                            ;IS NO AUTO-GO  
05ac 3a 8a 08		            LD      A, (L088A)                          ;TEST THAT A LOAD OPERATION WAS  
05af b7			            OR      A                                   ;DONE  
05b0 20 01		            JR      NZ, L05B3                           ;SKIP JUMP IF IT WAS A TEST  
05b2 e9			            JP      (HL)                                ;ELSE AUTO START THE PROGRAM  
05b3			  
05b3			;THE POST LOAD/TEST MENU DISPLAYS ARE SET UP HERE. IF THE LOAD/TEST FAILED THE ZERO FLAG  
05b3			;IS CLEAR THE ROUTINE WILL POINT TO THE "FAIL" DISPLAY. OTHERWISE IT IS SET TO POINT TO  
05b3			;THE "PASS" DISPLAY. THE DATA DISPLAY IS CALCULATED BY ADDING THE MENU ENTRY NUMBER OF  
05b3			;THE JUST PERFORMED OPERATION X2, TO THE TABLE BASE OF POST LOAD/TEST DATA DISPLAYS.  
05b3			;(THE MENU ENTRY NUMBER IS STILL THE SAME AS IT WAS WHEN "GO" WAS PRESS FROM THE MENU).  
05b3			  
05b3			ORG         $05B3  
05b3 11 68 07		L05B3:      LD      DE, L0768                           ;LOAD DE TO BASE OF DATA DISPLAY  
05b6 21 5c 07		            LD      HL, L075C                           ;TABLE AND HL "FAIL" DISPLAY  
05b9 20 02		            JR      NZ, L05BE                           ;TABLE:  
05bb 2e 58		            LD      L, 0x58                             ;ADJUST HL TO PASS IF ZERO  
05bd 00			L05BE:      NOP                                         ;(FROM FIXED ERROR)  
05be 3a 8f 08		            LD      A, (L088F)                          ;FIND WHAT OPERATION WAS PERFORMED  
05c1 07			            RLCA                                        ;AND DOUBLE VALUE AND ADD TO HL TO  
05c2 83			            ADD     A, E                                ;POINT DE AT POST TAPE OPERATION  
05c3 5f			            LD      E, A                                ;DATA DISPLAY ENTRY (SEE 0768-0771)  
05c4 00			            NOP                                         ;(FROM FIXED ERROR)  
05c5 af			            XOR     A                                   ;ZERO A  
05c6 c3 47 00		            JP      L0047                               ;JUMP TO SOFT MENU ENTRY  
05c9			  
05c9			;THIS IS THE CONVERT/TEST B ROUTINE.  
05c9			;THE VALUE IN B IS CONVERTED AND OUTPUTTED TO PORT 2.  
05c9			;THEN B IS TESTED AND ONE OF THE FOLLOWING OPERATIONS IS PERFORMED. IF B=0 THEN C IS  
05c9			;TRANSFERRED INTO B AND THE ZERO FLAG IS SET. IF B IS NOT 0 THEN B IS DECREMENTED, THE  
05c9			;COUNT IS UP-DATED IN ITS BUFFER AND THE ZERO FLAG AND B IS CLEARED.  
05c9			  
05c9			ORG     $05C9  
05c9 78			L05C9:      LD      A, B                                ;PUT HIGH BYTE OF COUNT IN A  
05ca e6 0f		            AND     0x0F                                ;MASK TO ONE DIGIT  
05cc 11 d0 07		            LD      DE, 07D0H                           ;POINT DE TO DISPLAY CODE TABLE  
05cf 83			            ADD     A, E                                ;ADD A  
05d0 5f			            LD      E, A  
05d1 1a			            LD      A, (DE)                             ;GET DISPLAY VALUE  
05d2 d3 02		            OUT     (DSEGMENT), A                       ;OUTPUT IT TO DISPLAY  
05d4 78			            LD      A, B                                ;TEST HIGH BYTE  
05d5 b7			            OR      A                                   ;FOR ZERO  
05d6 28 09		            JR      Z, L05E1                            ;JUMP IF ZERO  
05d8 05			            DEC     B                                   ;ELSE DECREASE COUNT BY ONE BLOCK  
05d9 ed 43 a8 08	            LD      (L08A8), BC                         ;STORE COUNT  
05dd 06 00		            LD      B, 0x00                             ;LOAD B FOR 256 BYTE OUTPUT BLOCK  
05df b7			            OR      A                                   ;CLEAR ZERO FLAG  
05e0 c9			            RET                                         ;DONE  
05e1 41			L05E1:      LD      B, C                                ;PUT LAST BLOCK SIZE IN B  
05e2 c9			            RET                                         ;DONE  
05e3			  
05e3			;THIS BLOCK LOADS/TESTS THE BYTES IN FROM THE TAPE. THE NUMBER OF BYTES IS HELD IN B ON  
05e3			;INPUT. AFTER THE SUB-ROUTINE THAT INPUTS A BYTE IS CALLED, A TEST AND JUMP IS DONE. THE  
05e3			;TEST AND JUMP SELECT THE REQUIRED CODE TO PERFORM A LOAD OR TEST AS SELECTED FROM THE  
05e3			;MENU BY THE USER. THE CHECK-SUM LOADED FROM THE TAPE HAS HAD ONE ADDED TO IT BY THE TAPE  
05e3			;OUTPUT ROUTINE. THIS ADDED ONE IS REMOVED IN THIS ROUTINE BEFORE THE CHECK-SUM COMPARE  
05e3			;IS DONE.  
05e3			  
05e3 3a 8a 08		L05E3:      LD      A, (L088A)                          ;GET CURRENT OPERATION  
05e6 4f			            LD      C, A                                ;SAVE IN C  
05e7 af			L05E7:      XOR     A                                   ;CLEAR A FOR CHECKSUM  
05e8 f5			L05E8:      PUSH    AF                                  ;SAVE CHECKSUM  
05e9 cd 0b 06		            CALL    L060B                               ;CALL GET BYTE  
05ec cb 49		            BIT     1, C                                ;TEST FOR CURRENT OPERATION  
05ee 20 0e		            JR      NZ, L05FE                           ;JUMP IF A EITHER TEST  
05f0 73			            LD      (HL), E                             ;ELSE STORE INPUTTED BYTE IN MEMORY  
05f1 23			            INC     HL                                  ;POINT TO NEXT LOCATION  
05f2 f1			L05F2:      POP     AF                                  ;GET CHECKSUM  
05f3 83			L05F3:      ADD     A, E                                ;ADD TO NEW BYTE  
05f4 10 f2		            DJNZ    L05E8                               ;DO UNTIL BLOCK DONE  
05f6 f5			            PUSH    AF                                  ;SAVE CHECKSUM  
05f7 cd 0b 06		            CALL    L060B                               ;GET TAPE CHECKSUM  
05fa f1			            POP     AF                                  ;GET MEMORY CHECKSUM  
05fb 1d			            DEC     E                                   ;CORRECT TAPE CHECKSUM  
05fc bb			            CP      E                                   ;TEST CHECKSUMS TO SET FLAGS  
05fd c9			            RET                                         ;BLOCK DONE  
05fe cb 41		L05FE:      BIT     0, C                                ;TEST FOR WHICH TEST  
0600 28 f0		            JR      Z, L05F2                            ;JUMP IF CHECKSUM ONLY TEST  
0602 f1			            POP     AF                                  ;GET CHECKSUM  
0603 57			            LD      D, A                                ;SAVE IN D  
0604 7b			            LD      A, E                                ;GET INPUT BYTE  
0605 be			            CP      (HL)                                ;TEST TO MEMORY  
0606 23			            INC     HL                                  ;POINT TO NEXT LOCATION  
0607 7a			            LD      A, D                                ;PUT CHECKSUM BACK IN A  
0608 28 e9		            JR      Z, L05F3                            ;JUMP TO MAIN LOOP IF ALL OK  
060a c9			            RET                                         ;RETURN IF ERROR  
060b			  
060b			;THIS ROUTINE INPUTS A SINGLE BYTE.  
060b cd 18 06		L060B:      CALL    L0618                               ;GET START BIT  
060e 16 08		            LD      D, 0x08                             ;LOAD D FOR 8 BITS  
0610 cd 18 06		L0610:      CALL    L0618                               ;GET BIT  
0613 cb 1b		            RR      E                                   ;PUT IT IN E  
0615 15			            DEC     D  
0616 20 f8		            JR      NZ, L0610                           ;DO FOR EIGHT BITS,  
0618			  
0618			;THIS ROUTINE INPUTS A SINGLE BIT  
0618			;THE STRUCTURE OF EACH BIT IS IMPORTANT TO UNDERSTAND AT THIS POINT. A LOGIC 0 IS REPRESENTED  
0618			;BY 4 SHORT PERIODS FOLLOWED BY 1 LONG PERIOD AND A LOGIC 1 BY 2 SHORT PERIODS AND 2 LONG  
0618			;PERIODS. THESE ARE HIGH SPEED FIGURES. FOR LOW SPEED THE ABOVE COUNTS ARE DOUBLED.  
0618			;THE BITS ARE DECODED BY COUNTING THE RATIO OF SHORT PERIODS TO LONG PERIODS. A COMPLICATED  
0618			;METHOD OF COUNTING IS USED TO RESULT IN THE BIT VALUE BEING REFLECTED IN BIT 7 OF L. THE  
0618			;ROUTINE IS TERMINATED WHEN A SHORT PERIOD THAT FOLLOWED A LONG PERIOD IS DETECTED. THE  
0618			;LONG PERIOD IS FLAGGED WITH BIT 0 OF H. THE "SHORT AFTER LONG" PERIOD USED FOR TERMINATION  
0618			;IS ACTUALLY THE FIRST CELL OF THE NEXT BIT.  
0618			;THE VALUE OF THE BIT INPUTTED IS THEN POT INTO THE CARRY FLAG.  
0618			  
0618 d9			L0618:      EXX                                         ;SWAP REGISTERS  
0619 21 00 00		            LD      HL, 0x0000                          ;ZERO HL  
061c cd 30 06		L061C:      CALL    L0630                               ;CALL TO MEASURE PERIOD  
061f 38 06		            JR      C, L0627                            ;JUMP IF SHORT PERIOD  
0621 2d			            DEC     L                                   ;SET HIGH ORDER BIT OF L TO ONES  
0622 2d			            DEC     L  
0623 cb c4		            SET     0, H                                ;REMEMBER THAT THE LONG PERIOD  
0625 18 f5		            JR      L061C                               ;HAS BEEN DETECTED: LOOP BACK  
0627 2c			L0627:      INC     L                                   ;SHORT PERIOD SO ADD ONE TO L  
0628 cb 44		            BIT     0, H                                ;TEST FOR SHORT AFTER LONG PERIOD  
062a 28 f0		            JR      Z, L061C                            ;JUMP IF NOT  
062c cb 15		            RL      L                                   ;END OF BIT: PUT BIT 7,L INTO  
062e d9			            EXX                                         ;CARRY: SWAP REGISTERS  
062f c9			            RET                                         ;INPUT BIT IN CARRY  
0630			  
0630			;THIS ROUTINE INPUTS AND MEASURES THE PERIOD OF EACH TAPE CELL AND COMPARES IT TO THE  
0630			;THRESHOLD BETWEEN A SHORT AND LONG PERIOD. THE CELL IS ALSO ECHOED ON THE TEC SPEAKER.  
0630			  
0630 11 00 00		L0630:      LD      DE, 0x0000                          ;ZERO DE FOR PERIOD MEASUREMENT  
0633 db 03		L0633:      IN      A, (DATLATCH)                       ;TEST TAPE LEVEL  
0635 13			            INC     DE                                  ;TIME PERIOD  
0636 17			            RLA                                         ;PUT TAPE LEVEL INTO CARRY  
0637 30 fa		            JR      NC, L0633                           ;LOOP UNTIL IT GOES HIGH  
0639 af			            XOR     A                                   ;ECHO IT ON  
063a d3 01		            OUT     (DSCAN), A                          ;THE TEC SPEAKER  
063c db 03		L063C:      IN      A, (DATLATCH)                       ;MEASURE SECOND HALF OF CYCLE  
063e 13			            INC     DE                                  ;IN THE SAME FASHION AS ABOVE  
063f 17			            RLA  
0640 38 fa		            JR      C, L063C                            ;THIS TIME LOOP UNTIL TAPE LEVEL  
0642 3e 84		            LD      A, 0x84                             ;GOES LOW: ECHO IT ON TEC SPEAKER  
0644 d3 01		            OUT     (DSCAN), A  
0646 7b			            LD      A, E                                ;GET PERIOD MEASUREMENT  
0647 fe 1a		            CP      0x1A                                ;COMPARE IT TO THRESHOLD  
0649 c9			            RET                                         ;TO SET FLAGS: DONE  
064a			  
064a			;THIS ROUTINE OUTPUTS A BLOCK TO THE TAPE. THE NUMBER OF BYTES IS HELD IN B AND THE BLOCK  
064a			;IS ADDRESS BY HL. AFTER ALL THE BYTES HAVE BEEN OUTPUTTED, THE CHECKSUM +1, WHICH WAS  
064a			;ADDED OF AS EACH BYTE WAS OUTPUTTED, IS SENT TO THE TAPE.  
064a			  
064a 08			L064A:      EX      AF, AF'                             ;GET CHECKSUM IN A  
064b 5e			L064B:      LD      E, (HL)                             ;PUT BYTE TO BE OUTPUTTED IN E  
064c 83			            ADD     A, E                                ;ADD FOR CHECKSUM  
064d 08			            EX      AF, AF'                             ;SAVE IN ALTERNATE AF  
064e cd 57 06		            CALL    L0657                               ;CALL OUT BYTE  
0651 23			            INC     HL                                  ;POINT TO NEXT BYTE  
0652 10 f6		            DJNZ    L064A  
0654 08			            EX      AF, AF'                             ;GET CHECKSUM  
0655 3c			            INC     A                                   ;INCREASE IT BY ONE  
0656 5f			            LD      E, A                                ;PUT IT IN E  
0657			  
0657			;THIS ROUTINE OUTPUTS A SINGLE BYTE IN E TO THE TAPE. THE FORMAT IS 1 START BIT, EIGHT  
0657			;DATA BITS AND 1 STOP BIT.  
0657			  
0657 16 08		L0657:      LD      D, 0x08                             ;SET D FOR 8 BITS  
0659 b7			            OR      A                                   ;CLEAR CARRY AND CALL OUTBIT  
065a cd 66 06		            CALL    L0666                               ;TO OUTPUT BINARY ZERO FOR START BIT  
065d cb 1b		L065D:      RR      E                                   ;PUT FIRST BIT IN CARRY  
065f cd 66 06		            CALL    L0666                               ;CALL OUT BIT  
0662 15			            DEC     D  
0663 20 f8		            JR      NZ, L065D                           ;DO FOR 8 BITS  
0665 37			            SCF                                         ;SET CARRY TO OUTPUT STOP BIT (1)  
0666			  
0666			;THIS ROUTINE OUTPUTS A SINGLE BIT. IF THE CARRY IS SET, THEN A LOGIC 1 IS OUTPUTTED  
0666			;OTHERWISE A LOGIC O.  
0666			;A 1 IS REPRESENTED BY 2 SHORT AND 2 LONG PERIODS.  
0666			;A 0 IS REPRESENTED BY 4 SHORT PERIODS AND 1 LONG PERIOD.  
0666			;L IS LOADED WITH DOUBLE THE LOW SPEED CYCLE COUNT AS IT IS USED TO COUNT THE HALF CYCLES  
0666			;IN THE TONE ROUTINE. IF THE HIGH SPEED SAVE IS SELECTED, THEN THE CYCLE COUNT WILL BE  
0666			;HALVED IN THE TONE ROUTINE.  
0666			  
0666 d9			L0666:      EXX                                         ;SWAP REGISTERS  
0667 26 00		            LD      H, 0x00                             ;ZERO H  
0669 38 09		            JR      C, L0674                            ;JUMP IF BINARY 1 IS TO BE OUTPUTTED  
066b 2e 10		            LD      L, 0x10                             ;LOAD L WITH HIGH TONE CYCLE COUNT  
066d cd 84 06		            CALL    L0684                               ;CALL HIGH TONE  
0670 2e 04		            LD      L, 0x04                             ;LOAD L WITH LOW TONE CYCLE COUNT  
0672 18 07		            JR      L067B                               ;JUMP TO LOW TONE  
0674 2e 08		L0674:      LD      L, 0x08                             ;LOAD L FOR HIGH TONE CYCLE COUNT  
0676 cd 84 06		            CALL    L0684                               ;FOR BINARY ONE: CALL HIGH TONE  
0679 2e 08		            LD      L, 0x08                             ;LOAD L FOR LOW TONE CYCLE COUNT  
067b cd 80 06		L067B:      CALL    L0680                               ;CALL LOW TONE  
067e d9			            EXX                                         ;SWAP BACK REGISTERS  
067f c9			            RET                                         ;DONE  
0680			  
0680			;SET-UP FOR LOW TONE (LONG PERIOD)  
0680 0e 29		L0680:      LD      C, 0x29                             ;LOAD C FOR LOW TONE  
0682 18 02		            JR      L0686                               ;JUMP TO TONE ROUTINE  
0684			  
0684			;SET-UP FOR HIGH TONE (SHORT PERIOD)  
0684 0e 11		L0684:      LD      C, 11H                              ;LOAD C FOR HIGH TONE  
0686			  
0686			;TONE ROUTINE  
0686			;TESTS FOR LOWSPEED SAVE. IF SO THEN IT HALVES THE CYCLE COUNT IN L.  
0686 3a 8f 08		L0686:      LD      A, (L088F)                          ;FIND WHICH SPEED  
0689 b7			            OR      A                                   ;ZERO = HIGH SPEED  
068a 20 02		            JR      NZ, L068E                           ;JUMP IF LOW SPEED  
068c cb 3d		            SRL     L                                   ;ELSE HALVE CYCLE COUNT  
068e 11 01 00		L068E:      LD      DE, 0001H                           ;  
0691 3e 84		            LD      A, 0x84                             ;TURN ON SPEAKER AND MIDDLE DISPLAY  
0693 d3 01		L0693:      OUT     (DSCAN), A                          ;  
0695 41			            LD      B, C                                ;  
0696 10 fe		L0696:      DJNZ    L0696                               ;PERIOD DELAY  
0698 ee 80		            XOR     0x80                                ;TOGGLE SPEAKER BIT  
069a ed 52		            SBC     HL, DE                              ;DECREASE CYCLE COUNT  
069c 20 f5		            JR      NZ, L0693                           ;JUMP IF NOT ALL CYCLES DONE  
069e c9			            RET                                         ;ELSE RETURN  
069f			  
069f			;THIS ROUTINE SETS UP THE "ERR-IN DISPLAY ON THE PERIMETER HANDLER.  
069f			ORG     $069F  
069f 21 52 07		L069F:      LD      HL, L0752                           ;POINT HL TO "Err-In" DISPLAY  
06a2 11 00 08		            LD      DE, L0800                           ;CODE AND DE TO RAM DEstination  
06a5 01 06 00		            LD      BC, 0x0006                          ;BC(ount)  
06a8 ed b0		            LDIR                                        ;MOVE BLOCK  
06aa c3 50 00		            JP      L0050                               ;JUNE TO SOFT PERIMETER ENTRY  
06ad			  
06ad			;----END OF TAPE ROUTINES----  
06ad			;THIS ROUTINE IS THE KEYBOARD READER/VALIDATER  
06ad			;THE ACTION IS AS FOLLOWS:  
06ad			;A SHORT LOOP LOOKS FOR A KEY PRESS. IF NO KEY IS PRESSED, THEN THE KEY PRESS BUFFER (0825)  
06ad			;IS CLEARED THE ZERO AND THE CARRY FLAG CLEARED AND THE ROUTINE RETURNS.  
06ad			;IF A KEY IS FOUND, THEN THE REMAINING LOOP COUNTS ARE WORKED OFF IN A DUMMY LOOP TO ENSURE  
06ad			;EQUAL TIME IN EXECUTING THE ROUTINE.  
06ad			;IF IT IS THE FIRST TIME.THAT THE KEY HAS BEEN DETECTED, THEN THE KEY PRESS FLAG WILL BE  
06ad			;CLEAR. (IT WAS CLEARED BY THE MONITOR VARIABLES ON RESET). THE ROUTINE TESTS FOR THIS  
06ad			;CONDITION AND IF TRUE THEN THE KEY IS ACCEPTED AS "VALID" AND FLAGGED BY A SET CARRY AND  
06ad			;SET ZERO FLAG AND THE KEY PRESS FLAG IS SET TO INDICATE THE A KEY HAS BEEN DETECTED. THE  
06ad			;INPUT IS THEN PLACED IN BOTH THE "I" REGISTER AND THE ACCUMULATOR. IF A KEY IS DETECTED  
06ad			;BUT FOUND NOT TO BE VALID, I.E. IT HAS ALREADY BEEN DETECTED AND PROCESSED, THEN THE  
06ad			;CARRY WILL BE SET BUT THE ZERO CLEARED. THIS ALLOWS THE AUTO KEY REPEAT SECTION TO KNOW  
06ad			;THAT A KEY IS STILL BEING HELD DOWN. THE AUTO KEY REPEAT SECTION MAKE UP ITS OWN MIND  
06ad			;WHETHER IT IS VALID OR NOT.  
06ad			  
06ad			ORG     $06AD  
06ad			;#IFDEF DA_KEYBOARD  
06ad			;L06AD: IN A,(KEYBOARD)                                 ;TEST FOR KEY PRESSED  
06ad			;#ELSE  
06ad db 03		L06AD:      IN      A, (DATLATCH)                       ;TEST FOR KEY PRESSED  
06af			;#ENDIF  
06af cb 77		            BIT     6, A  
06b1			;#IFDEF DA_ACTIVE_HIGH  
06b1			;           JR      NZ,L06BB                            ;DA IS HIGH = KEYPRESS  
06b1			;#ELSE  
06b1 28 08		            JR      Z, L06BB                            ;DA IS LOW = KEYPRESS  
06b3			;#ENDIF  
06b3			  
06b3 10 f8		            DJNZ    L06AD                               ;LOOP LOOKING FOR KEY UNTIL B=0  
06b5 af			L06B5:      XOR     A                                   ;CLEAR KEY PRESS FLAG  
06b6 32 25 08		            LD      (L0825), A  
06b9 3d			            DEC     A                                   ;SET A TO FF AND CLEAR ZERO FLAG  
06ba c9			L06BA:      RET                                         ;DONE  
06bb 3a 25 08		L06BB:      LD      A, (L0825)                          ;GET KEY PRESS FLAG  
06be b7			            OR      A                                   ;TEST FOR ZERO  
06bf 20 00		            JR      NZ, L06C1                           ;DUMMY JUMP TO EQUALIZE TIME  
06c1 10 f8		L06C1:      DJNZ    L06BB                               ;FINISH LOOP  
06c3 37			            SCF                                         ;SET CARRY  
06c4 20 f4		            JR      NZ, L06BA                           ;DUMMY JUMP TO RETURN  
06c6 3d			            DEC     A                                   ;SET KEY PRESS FLAG TO FF  
06c7 32 25 08		            LD      (L0825), A  
06ca db 00		L06CA:      IN      A, (KEYBOARD)                       ;GET INPUT KEY FROM ENCODER CHIP  
06cc e6 1f		            AND     0x1F                                ;MASK OFF UNUSED BITS  
06ce cb 7f		            BIT     7, A                                ;SET ZERO FLAG (THINK ABOUT IT!)  
06d0 37			            SCF                                         ;SET CARRY  
06d1 32 20 08		            LD      (L0820), A                          ;STORE INPUT KEY  
06d4 c9			            RET                                         ;DONE  
06d5			  
06d5			;THIS ROUTINE IS CALLED ONCE ON EVERY HARD RESET. IT INITIALIZES THE LCD THEN TESTS THAT  
06d5			;IT IS THERE (IT CANNOT DO IT THE OTHER WAY AROUND AS THE LCD NEEDS TO BE INITIALIZED  
06d5			;BEFORE IT WILL RESPOND INTELLIGENTLY). IF THE LCD IS FITTED THEN THE ROUTINE WILL READ  
06d5			;IN AN ASCII SPACE CHARACTER (20H) OR IF THE LCD IS NOT, JUNK FROM THE DATA BUSS.  
06d5			;20H IS SUBTRACTED FROM WHATEVER IS READ IN AND THE RESULT IS STORED IN THE LCD ENABLE  
06d5			;BUFFER. IF THE RESULT IS ZERO THEN THE LCD IS ENABLED. IT IS VITAL TO KNOW IF THE LCD IS  
06d5			;FITTED, OTHERWISE THE ROUTINE WHICH READS THE BUSY FLAG MAY LOOP FOREVER.  
06d5			  
06d5 21 b5 07		L06D5:      LD      HL, L07B5                           ;POINT HL TO LCD INITIALIZE TABLE  
06d8 01 04 04		            LD      BC, 0x0404                          ;B=4 BYTES, C=PORT 4  
06db 11 00 05		L06DB:      LD      DE, 0500H                           ;DELAY BETWEEN  
06de 1b			L06DE:      DEC     DE                                  ;EACH BYTE  
06df 7a			            LD      A, D                                ;AS PER  
06e0 b3			            OR      E                                   ;LCD MANUFACTER'S  
06e1 20 fb		            JR      NZ, L06DE                           ;INSTRUCTIONS  
06e3 ed a3		            OUTI                                        ;OUTPUT (HL) TO (C). HL=HL=1,B=B-1  
06e5 20 f4		            JR      NZ, L06DB                           ;JUMP IF B NOT 0  
06e7 10 fe		L06E7:      DJNZ    L06E7                               ;SHORT DELAY  
06e9 db 84		            IN      A, (LCDDATA)                        ;INPUT FROM LCD TO SEE IF IT'S THERE  
06eb d6 20		            SUB     0x20                                ;SUBTRACT ASCII SPACE, IF LCD FITTED  
06ed 32 21 08		            LD      (L0821), A                          ;RESULT WILL BE ZERO: STORE THIS IN  
06f0 c9			            RET                                         ;LCD MASK: DONE  
06f1 ff			            RST     38H                                 ;  
06f2 ff			            RST     38H                                 ;  
06f3 ff			            RST     38H                                 ;  
06f4 ff			            RST     38H                                 ;  
06f5 ff			            RST     38H                                 ;  
06f6 ff			            RST     38H                                 ;  
06f7 ff			            RST     38H                                 ;  
06f8 ff			            RST     38H                                 ;  
06f9 ff			            RST     38H                                 ;  
06fa ff			            RST     38H                                 ;  
06fb ff			            RST     38H                                 ;  
06fc ff			            RST     38H                                 ;  
06fd ff			            RST     38H                                 ;  
06fe ff			            RST     38H                                 ;  
06ff ff			            RST     38H                                 ;  
0700			  
0700			;AT 0700 IS THE TAPE'S MENU JUMP TABLE.  
0700			ORG     0x0700  
0700 c3 3f 04		            DB      0xC3, 0x3F, 0x04                    ;HIGH SPEED SAVE  
0703 c3 3f 04		            DB      0xC3, 0x3F, 0x04                    ;LOW SPEED SAVE  
0706 c3 3b 04		            DB      0xC3, 0x3B, 0x04                    ;TEST BLOCK  
0709 c3 37 04		            DB      0xC3, 0x37, 0x04                    ;TEST CHECKSUM  
070c c3 26 04		            DB      0xC3, 0x26, 0x04                    ;LOAD TAPE  
070f			  
070f			  
070f			;BELOW ARE THE JMON DEFAULT RESET VARIABLES (A ZERO IS THE ACTIVE RAM  
070f			;STATE UNLESS OTHERWISE STATED). LOCATION  
070f			;* DENOTES CONTROL BYTES DESIGNED TO BE USER ALTERED (IN RAM).  
070f			  
070f			ORG     $070F  
070f 00			L070F:      DB      0x00                                ;KEY BUFFER 0820  
0710 00			L0710:      DB      0x00                                ;LCD ON/OFF FLAG 0821*  
0711 00			L0711:      DB      0x00                                ;SOUND ON/OFF 0822*  
0712 ff			L0712:      DB      0xFF                                ;GO AT ALTERNATE GO ADDRESS IF AA 0823*  
0713 ff			L0713:      DB      0xFF                                ;STEPPER KEY CONTROL/TIMER 0824  
0714 00			L0714:      DB      0x00                                ;KEY PRESSED FLAG 0825  
0715 ff			L0715:      DB      0xFF                                ;UNUSED 0826  
0716 00			L0716:      DB      0x00                                ;AUTO INCREMENT ON/OFF 0827*  
0717 00 0a		L0717:      DB      0x00, 0x0A                          ;ALT GO ADDR/SOFT RESET EDIT LOCATION ($1000) 0828*  
0719 70			L0719:      DB      0x70                                ;AUTO KEY REPEAT TIMER 082A  
071a 00			L071A:      DB      0x00                                ;MONITOR CONTROL BYTE 082B  
071b 00 08		L071B:      DB      0x00, 0x08                          ;DISPLAY BUFFER ADDRESS 082C*  
071d 00 09		L071D:      DB      0x00, 0x09                          ;INITIAL EDITING LOCATION 082E  
071f			  
071f			;BELOW ARE THE JMON INDIRECT JUMP ADDRESSES. THIS TABLE IS SHIFTED DOWN TO 0830 ON A HARD RESET.  
071f c3 d5 01		L071F:      DB      0xC3, 0xD5, 0x01                    ;CONVERT HL TO DISPLAY CODE 0830  
0722 c3 da 01		L0722:      DB      0xC3, 0xDA, 0x01                    ;CONVERT A TO DISPLAY CODE 0833  
0725 c3 ba 01		L0725:      DB      0xC3, 0xBA, 0x01                    ;LED SCAN ROUTINE 0836  
0728 c3 ee 01		L0728:      DB      0xC3, 0xEE, 0x01                    ;SET LED DOTS 0839  
072b c3 24 02		L072B:      DB      0xC3, 0x24, 0x02                    ;RESET TONES 083C  
072e c3 27 02		L072E:      DB      0xC3, 0x27, 0x02                    ;TONE 083F  
0731 c3 81 01		L0731:      DB      0xC3, 0x81, 0x01                    ;SCAN/KEY/LCD/PATCH LOOP 0842  
0734 c3 b2 00		L0734:      DB      0xC3, 0xB2, 0x00                    ;SOFT JMON ENTRY L0845  
0737 c3 3c 02		L0737:      DB      0xC3, 0x3C, 0x02                    ;LCD ROUTINE 0848  
073a			  
073a			;BELOW ARE THE DISPLAY TABLES FOR THE TAPE'S MENU ADDRESS DISPLAYS AND  
073a			;THE "ERR-IN" DISPLAY THAT IS SUPERIMPOSED OVER THE PERIMETER HANDLER.  
073a a7 6f ea c7	L073A:      DB      0xA7, 0x6F, 0xEA, 0xC7              ;"SAVE"  
073e a7 6f ea c7	L073E:      DB      0xA7, 0x6F, 0xEA, 0xC7              ;"SAVE"  
0742 c6 c7 a7 c6	L0742:      DB      0xC6, 0xC7, 0xA7, 0xC6              ;"TEST"  
0746 c6 c7 a7 c6	L0746:      DB      0xC6, 0xC7, 0xA7, 0xC6              ;"TEST"  
074a c2 eb 6f ec	L074A:      DB      0xC2, 0xEB, 0x6F, 0xEC              ;"LOAD"  
074e 04 c7 64 ec	L074E:      DB      0x04, 0xC7, 0x64, 0xEC              ;"-End"  
0752 04 c7 44 44 28 64	L0752:      DB      0x04, 0xC7, 0x44, 0x44, 0x28, 0x64  ;"-Err In"  
0758 4f 6f a7 a7	L0758:      DB      0x4F, 0x6F, 0xA7, 0xA7              ;"PASS"  
075c 47 6f 28 c2	L075C:      DB      0x47, 0x6F, 0x28, 0xC2              ;"FAIL"  
0760			  
0760			;BELOW ARE THE TAPE'S MENU DATA DISPLAYS.  
0760 04 6e		L0760:      DB      0x04, 0x6E                          ;"-H"  
0762 04 c2		L0762:      DB      0x04, 0xC2                          ;"-L"  
0764 e6 c2		L0764:      DB      0xE6, 0xC2                          ;"bL"  
0766 c3 a7		L0766:      DB      0xC3, 0xA7                          ;"CS"  
0768 04 c6		L0768:      DB      0x04, 0xC6                          ;"-t"  
076a 04 a7		L076A:      DB      0x04, 0xA7                          ;"-S"  
076c c6 e6		L076C:      DB      0xC6, 0xE6                          ;"tb"  
076e c3 a7		L076E:      DB      0xC3, 0xA7                          ;"CS"  
0770 c2 ec		L0770:      DB      0xC2, 0xEC                          ;"Ld"  
0772 ff ff ff ff ff ff ff ff ff ff	L0772:      DB      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF      ;(UNUSED)  
077c			  
077c			;BELOW IS THE PERIMETER HANDLER COMMAND STRING FOR THE TAPE SOFTWARE.  
077c 00 ff c6 07 99 08 00 03	L077C:      DB  0x00,0xFF,0xC6,0x07,0x99,0x08,0x00,0x03  
0784			;(FF FF; THE JUMP ADDRESS FOR THE TAPE ROUTINES IS SUPPLIED BY THE POST MENU SET-UP ROUTINES, SEE 0426-044E).  
0784			  
0784			;0786 - 0788 FF ;(RESERVED FOR COMMAND STRING EXPANSION).  
0784 ff ff ff ff ff	L0786:      DB      0xFF,0xFF,0xFF,0xFF,0xFF  
0789			  
0789			;BELOW IS THE TAPE'S MENU DRIVER COMMAND STRING.  
0789 ff ff 00 04 00 07 3a 07 60 07	L0789:      DB      0xFF,0xFF,0x00,0x04,0x00,0x07,0x3A,0x07,0x60,0x07  
0793			  
0793			;TAPE'S SOFTWARE MENU DATA KEY HANDLER ROUTINE JUMP VECTOR (A RETURN INSTRUCTION).  
0793 c9			L0793:      DB      0xC9  
0794			  
0794			;BELOW IS THE STEPPERS DATA DISPLAY CODES.  
0794			ORG     $0794  
0794 4f c3		L0794:      DB      0x4F, 0xC3                          ;"PC"  
0796 6f 47		L0796:      DB      0x6F, 0x47                          ;"AF"  
0798 e6 c3		L0798:      DB      0xE6, 0xC3                          ;"BC"  
079a ec c7		L079A:      DB      0xEC, 0xC7                          ;"DE"  
079c 6e c2		L079C:      DB      0x6E, 0xC2                          ;"HL"  
079e 28 6e		L079E:      DB      0x28, 0x6E                          ;"IX"  
07a0 28 ae		L07A0:      DB      0x28, 0xAE                          ;"IY"  
07a2 7f 57		L07A2:      DB      0x7F, 0x57                          ;“AF'"  
07a4 f6 d3		L07A4:      DB      0xF6, 0xD3                          ;"BC'"  
07a6 fc d7		L07A6:      DB      0xFC, 0xD7                          ;"DE'"  
07a8 7e d2		L07A8:      DB      0x7E, 0xD2                          ;"HL'"  
07aa a7 4f		L07AA:      DB      0xA7, 0x4F                          ;"SP"  
07ac ff			L07AC:      DB      0xFF                                ;(UNUSED)  
07ad			  
07ad			;START OF STAGGERED TABLE OF JMON MODE WORDS FOR LCD  
07ad			ORG     $07AD  
07ad 44 61 74 61	L07AD:      DB      0x44, 0x61, 0x74, 0x61              ;"Data"  
07b1 41 64 64 72	L07B1:      DB      0x41, 0x64, 0x64, 0x72              ;"Addr"  
07b5			  
07b5			;LCD INITIALIZATION CODES  
07b5			ORG     $07B5  
07b5 38 01 06 0c	L07B5:      DB      0x38, 0x01, 0x06, 0x0C  
07b9			  
07b9			;THE REST OF THE JMON MODE WORD TABLE FOR LCD  
07b9			ORG     $07B9  
07b9 46 73 2d		L07B9:      DB      0x46, 0x73, 0x2D                    ;"Fs-"  
07bc ff			            DB      0xFF  
07bd			  
07bd			;ADDRESS TABLE OF THE LCD PROMPT LOCATIONS.  
07bd			ORG     $07BD  
07bd 84 87 8a 8d c4 c7 ca cd 80	L07BD:      DB      0x84, 0x87, 0x8A, 0x8D, 0xC4, 0xC7, 0xCA, 0xCD, 0x80  
07c6			  
07c6			;TAPE'S PERIMETER HANDLER DATA DISPLAYS  
07c6			ORG     $07C6  
07c6 04 47		L07C6:      DB      0x04, 0x47                          ;"-F"  
07c8 04 a7		            DB      0x04, 0xA7                          ;"-S"  
07ca 04 c7		            DB      0x04, 0xC7                          ;u_Ett  
07cc 04 e3		            DB      0x04, 0xE3  
07ce ff ff		            DB      0xFF, 0xFF                          ;(UNUSED)  
07d0			  
07d0			;BELOW ARE THE DISPLAY CODE EQUIVALENTS OF THE HEX DIGITS 0 TO F LISTED IN ASCENDING ORDER.  
07d0			ORG     $07D0  
07d0 eb 28 cd ad 2e a7 e7 29 ef 2f 6f e6 c3 ec	L07D0:      DB      0xEB, 0x28, 0xCD, 0xAD, 0x2E, 0xA7, 0xE7, 0x29, 0xEF, 0x2F, 0x6F, 0xE6, 0xC3, 0xEC  
07de c7 47		L07DE:      DB      0xC7, 0x47                      ;MJ: Split out to allow for a Label that is used  
07e0			  
07e0			;FINALLY AT 07E0 IS THE FUNCTION-1 AND SHIFT JUMP ADDRESSES.  
07e0			ORG     $07E0  
07e0 d2 03 e3 02 5e 00 ff ff d3 02 ae 00 de 02 41 03	L07E0:      DB      0xD2, 0x03, 0xE3, 0x02, 0x5E, 0x00, 0xFF, 0xFF, 0xD3, 0x02, 0xAE, 0x00, 0xDE, 0x02, 0x41, 0x03  
07f0 ed 02 e8 02 f2 02 ff ff ff ff ff ff ff ff ff ff	            DB      0xED, 0x02, 0xE8, 0x02, 0xF2, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF  
0800			  
# End of file /Users/slarti/Documents/TEC1D/software-repo/monitors/JMon/JmonSource/JMON_SOURCE_01.asm
0800
